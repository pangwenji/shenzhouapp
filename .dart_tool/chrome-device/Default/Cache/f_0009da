define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/nested/nested.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/provider/src/reassemble_handler.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/collection/src/equality.dart'], (function load__packages__provider__src__provider_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__nested__nested$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__provider__src__reassemble_handler$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const sliver = packages__flutter__src__widgets__widget_span$46dart.src__widgets__sliver;
  const nested = packages__nested__nested$46dart.nested;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const reassemble_handler = packages__provider__src__reassemble_handler$46dart.src__reassemble_handler;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var provider = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $toString = dartx.toString;
  var $clear = dartx.clear;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    WidgetL: () => (T$.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    BuildContextL: () => (T$.BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))(),
    BuildContextLToWidgetL: () => (T$.BuildContextLToWidgetL = dart.constFn(dart.fnType(T$.WidgetL(), [T$.BuildContextL()])))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    ElementL: () => (T$.ElementL = dart.constFn(dart.legacy(framework.Element)))(),
    ElementLToboolL: () => (T$.ElementLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.ElementL()])))(),
    ListenableL: () => (T$.ListenableL = dart.constFn(dart.legacy(change_notifier.Listenable)))(),
    StreamL: () => (T$.StreamL = dart.constFn(dart.legacy(async.Stream)))(),
    TLToNull: () => (T$.TLToNull = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      return [core.Null, [TL()]];
    })))(),
    ElementLTovoid: () => (T$.ElementLTovoid = dart.constFn(dart.fnType(dart.void, [T$.ElementL()])))(),
    InheritedWidgetL: () => (T$.InheritedWidgetL = dart.constFn(dart.legacy(framework.InheritedWidget)))(),
    ReassembleHandlerL: () => (T$.ReassembleHandlerL = dart.constFn(dart.legacy(reassemble_handler.ReassembleHandler)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    DurationLToNull: () => (T$.DurationLToNull = dart.constFn(dart.fnType(core.Null, [T$.DurationL()])))(),
    DiagnosticsNodeL: () => (T$.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    JSArrayOfDiagnosticsNodeL: () => (T$.JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(T$.DiagnosticsNodeL())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    SliverWithKeepAliveWidgetL: () => (T$.SliverWithKeepAliveWidgetL = dart.constFn(dart.legacy(sliver.SliverWithKeepAliveWidget)))(),
    LayoutBuilderL: () => (T$.LayoutBuilderL = dart.constFn(dart.legacy(layout_builder.LayoutBuilder)))(),
    DefaultEqualityOfNeverL: () => (T$.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    FnToRL: () => (T$.FnToRL = dart.constFn(dart.gFnType((T, R) => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      var TLToRL = () => (TLToRL = dart.constFn(dart.fnType(RL(), [TL()])))();
      var TLToLRL = () => (TLToLRL = dart.constFn(dart.legacy(TLToRL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      return [RL(), [TLToLRL()]];
    })))(),
    VoidToTL: () => (T$.VoidToTL = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      return [TL(), []];
    })))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 19,
        [_Location_line]: 121,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2], T$._LocationL());
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 120,
        [_Location_file]: "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/provider.dart"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 15,
        [_Location_line]: 163,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.constList([C[5] || CT.C5], T$._LocationL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[4] || CT.C4,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 162,
        [_Location_file]: "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/inherited_provider.dart"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "owner",
        [_Location_column]: 7,
        [_Location_line]: 160,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 161,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8, C[9] || CT.C9], T$._LocationL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[7] || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 159,
        [_Location_file]: "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/inherited_provider.dart"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: T$.DefaultEqualityOfNeverL().prototype
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[12] || CT.C12
      });
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/provider.dart",
    "package:provider/src/provider.dart",
    "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/inherited_provider.dart",
    "file:///D:/flutter/.pub-cache/hosted/pub.flutter-io.cn/provider-4.3.3/lib/src/deferred_inherited_provider.dart"
  ];
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  provider.MultiProvider = class MultiProvider extends nested.Nested {};
  (provider.MultiProvider.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let providers = opts && 'providers' in opts ? opts.providers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    if (!(providers != null)) dart.assertFailed(null, I[0], 115, 16, "providers != null");
    provider.MultiProvider.__proto__.new.call(this, {key: key, children: providers, child: builder != null ? new basic.Builder.new({builder: dart.fn(context => builder(context, child), T$.BuildContextLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[0] || CT.C0}) : child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = provider.MultiProvider.prototype;
  dart.addTypeTests(provider.MultiProvider);
  dart.addTypeCaches(provider.MultiProvider);
  dart.setLibraryUri(provider.MultiProvider, I[1]);
  var builder$ = dart.privateName(provider, "InheritedProvider.builder");
  var _lazy = dart.privateName(provider, "_lazy");
  var _delegate = dart.privateName(provider, "_delegate");
  const _is_InheritedProvider_default = Symbol('_is_InheritedProvider_default');
  provider.InheritedProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CreateInheritedProviderOfTL = () => (_CreateInheritedProviderOfTL = dart.constFn(provider._CreateInheritedProvider$(TL())))();
    var _ValueInheritedProviderOfTL = () => (_ValueInheritedProviderOfTL = dart.constFn(provider._ValueInheritedProvider$(TL())))();
    var _InheritedProviderElementOfTL = () => (_InheritedProviderElementOfTL = dart.constFn(provider._InheritedProviderElement$(TL())))();
    var _InheritedProviderScopeOfTL = () => (_InheritedProviderScopeOfTL = dart.constFn(provider._InheritedProviderScope$(TL())))();
    class InheritedProvider extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$];
      }
      set builder(value) {
        super.builder = value;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegate].debugFillProperties(properties);
      }
      createElement() {
        return new (_InheritedProviderElementOfTL()).new(this);
      }
      buildWithChild(context, child) {
        if (!(this.builder != null || child != null)) dart.assertFailed(dart.str(this.runtimeType) + " used outside of MultiProvider must specify a child", I[2], 156, 7, "builder != null || child != null");
        return new (_InheritedProviderScopeOfTL()).new({owner: this, child: this.builder != null ? new basic.Builder.new({builder: dart.fn(context => {
              let t1, t0;
              t0 = context;
              t1 = child;
              return this.builder(t0, t1);
            }, T$.BuildContextLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[3] || CT.C3}) : child, $creationLocationd_0dea112b090073317d4: C[6] || CT.C6});
      }
    }
    (InheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[builder$] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (_CreateInheritedProviderOfTL()).new({create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[builder$] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (_ValueInheritedProviderOfTL()).new({value: value, updateShouldNotify: updateShouldNotify, startListening: startListening});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider._constructor = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[builder$] = builder;
      this[_lazy] = lazy;
      this[_delegate] = delegate;
      InheritedProvider.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = InheritedProvider.prototype;
    dart.addTypeTests(InheritedProvider);
    InheritedProvider.prototype[_is_InheritedProvider_default] = true;
    dart.addTypeCaches(InheritedProvider);
    dart.setMethodSignature(InheritedProvider, () => ({
      __proto__: dart.getMethods(InheritedProvider.__proto__),
      debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)]),
      createElement: dart.fnType(dart.legacy(provider._InheritedProviderElement$(dart.legacy(T))), []),
      buildWithChild: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])
    }));
    dart.setLibraryUri(InheritedProvider, I[1]);
    dart.setFieldSignature(InheritedProvider, () => ({
      __proto__: dart.getFields(InheritedProvider.__proto__),
      [_delegate]: dart.finalFieldType(dart.legacy(provider._Delegate$(dart.legacy(T)))),
      [_lazy]: dart.finalFieldType(dart.legacy(core.bool)),
      builder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(framework.Widget)])))
    }));
    return InheritedProvider;
  });
  provider.InheritedProvider = provider.InheritedProvider$();
  dart.addTypeTests(provider.InheritedProvider, _is_InheritedProvider_default);
  const _is_Provider_default = Symbol('_is_Provider_default');
  provider.Provider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    class Provider extends provider.InheritedProvider$(dart.legacy(T)) {
      static of(T, context, opts) {
        let listen = opts && 'listen' in opts ? opts.listen : true;
        if (!(context != null)) dart.assertFailed(null, I[0], 260, 12, "context != null");
        if (!(dart.test(context.owner.debugBuilding) || listen === false || dart.test(provider.debugIsInInheritedProviderUpdate))) dart.assertFailed("Tried to listen to a value exposed with provider, from outside of the widget tree.\n\nThis is likely caused by an event handler (like a button's onPressed) that called\nProvider.of without passing `listen: false`.\n\nTo fix, write:\nProvider.of<" + dart.str(dart.wrapType(dart.legacy(T))) + ">(context, listen: false);\n\nIt is unsupported because may pointlessly rebuild the widget associated to the\nevent handler, when the widget tree doesn't care about the value.\n\nThe context used was: " + dart.str(context) + "\n", I[0], 262, 7, "context.owner.debugBuilding ||\n          listen == false ||\n          debugIsInInheritedProviderUpdate");
        let inheritedElement = provider.Provider._inheritedElementOf(dart.legacy(T), context);
        if (dart.test(listen)) {
          context.dependOnInheritedElement(inheritedElement);
        }
        return inheritedElement.value;
      }
      static _inheritedElementOf(T, context) {
        if (!(context != null)) dart.assertFailed("Tried to call context.read/watch/select or similar on a `context` that is null.\n\nThis can happen if you used the context of a StatefulWidget and that\nStatefulWidget was disposed.\n", I[0], 293, 12, "context != null");
        if (!(provider._debugIsSelecting === false)) dart.assertFailed("Cannot call context.read/watch/select inside the callback of a context.select", I[0], 300, 7, "_debugIsSelecting == false");
        if (!!dart.wrapType(dart.legacy(T))._equals(dart.wrapType(dart.dynamic))) dart.assertFailed("Tried to call Provider.of<dynamic>. This is likely a mistake and is therefore\nunsupported.\n\nIf you want to expose a variable that can be anything, consider changing\n`dynamic` to `Object` instead.\n", I[0], 304, 7, "T != dynamic");
        let inheritedElement = null;
        if (dart.legacy(provider._InheritedProviderScope$(dart.legacy(T))).is(context.widget)) {
          context.visitAncestorElements(dart.fn(parent => {
            inheritedElement = dart.legacy(provider._InheritedProviderScopeElement$(dart.legacy(T))).as(parent.getElementForInheritedWidgetOfExactType(dart.legacy(provider._InheritedProviderScope$(dart.legacy(T)))));
            return false;
          }, T$.ElementLToboolL()));
        } else {
          inheritedElement = dart.legacy(provider._InheritedProviderScopeElement$(dart.legacy(T))).as(context.getElementForInheritedWidgetOfExactType(dart.legacy(provider._InheritedProviderScope$(dart.legacy(T)))));
        }
        if (inheritedElement == null) {
          dart.throw(new provider.ProviderNotFoundException.new(dart.wrapType(dart.legacy(T)), dart.runtimeType(context.widget)));
        }
        return inheritedElement;
      }
    }
    (Provider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      if (!(create != null)) dart.assertFailed(null, I[0], 201, 16, "create != null");
      Provider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, dispose: dispose, debugCheckInvalidValueType: false ? null : dart.fn(value => {
          let t0;
          t0 = provider.Provider.debugCheckInvalidValueType;
          return t0 == null ? null : t0(TL(), value);
        }, TLTovoid()), child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Provider.prototype;
    (Provider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      if (!dart.test(dart.fn(() => {
        let t0;
        t0 = provider.Provider.debugCheckInvalidValueType;
        t0 == null ? null : t0(TL(), value);
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[0], 230, 16, "() {\n          Provider.debugCheckInvalidValueType?.call<T>(value);\n          return true;\n        }()");
      Provider.__proto__.value.call(this, {key: key, builder: builder, value: value, updateShouldNotify: updateShouldNotify, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Provider.prototype;
    dart.addTypeTests(Provider);
    Provider.prototype[_is_Provider_default] = true;
    dart.addTypeCaches(Provider);
    dart.setLibraryUri(Provider, I[1]);
    return Provider;
  });
  provider.Provider = provider.Provider$();
  dart.defineLazy(provider.Provider, {
    /*provider.Provider.debugCheckInvalidValueType*/get debugCheckInvalidValueType() {
      return dart.fn((T, value) => {
        if (!dart.test(dart.fn(() => {
          if (T$.ListenableL().is(value) || T$.StreamL().is(value)) {
            dart.throw(assertions.FlutterError.new("Tried to use Provider with a subtype of Listenable/Stream (" + dart.str(dart.wrapType(dart.legacy(T))) + ").\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen " + dart.str(dart.wrapType(dart.legacy(T))) + " is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n"));
          }
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed(null, I[0], 371, 12, "() {\n      if (value is Listenable || value is Stream) {\n        throw FlutterError('''\nTried to use Provider with a subtype of Listenable/Stream ($T).\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen $T is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n''');\n      }\n      return true;\n    }()");
      }, T$.TLToNull());
    },
    set debugCheckInvalidValueType(_) {}
  }, true);
  dart.addTypeTests(provider.Provider, _is_Provider_default);
  var valueType$ = dart.privateName(provider, "ProviderNotFoundException.valueType");
  var widgetType$ = dart.privateName(provider, "ProviderNotFoundException.widgetType");
  provider.ProviderNotFoundException = class ProviderNotFoundException extends core.Object {
    get valueType() {
      return this[valueType$];
    }
    set valueType(value) {
      super.valueType = value;
    }
    get widgetType() {
      return this[widgetType$];
    }
    set widgetType(value) {
      super.widgetType = value;
    }
    toString() {
      return "Error: Could not find the correct Provider<" + dart.str(this.valueType) + "> above this " + dart.str(this.widgetType) + " Widget\n\nThis happens because you used a `BuildContext` that does not include the provider\nof your choice. There are a few common scenarios:\n\n- You added a new provider in your `main.dart` and performed a hot-reload.\n  To fix, perform a hot-restart.\n\n- The provider you are trying to read is in a different route.\n\n  Providers are \"scoped\". So if you insert of provider inside a route, then\n  other routes will not be able to access that provider.\n\n- You used a `BuildContext` that is an ancestor of the provider you are trying to read.\n\n  Make sure that " + dart.str(this.widgetType) + " is under your MultiProvider/Provider<" + dart.str(this.valueType) + ">.\n  This usually happens when you are creating a provider and trying to read it immediately.\n\n  For example, instead of:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // Will throw a ProviderNotFoundError, because `context` is associated\n      // to the widget that is the parent of `Provider<Example>`\n      child: Text(context.watch<Example>()),\n    ),\n  }\n  ```\n\n  consider using `builder` like so:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // we use `builder` to obtain a new `BuildContext` that has access to the provider\n      builder: (context) {\n        // No longer throws\n        return Text(context.watch<Example>()),\n      }\n    ),\n  }\n  ```\n\nIf none of these solutions work, consider asking for help on StackOverflow:\nhttps://stackoverflow.com/questions/tagged/flutter\n";
    }
  };
  (provider.ProviderNotFoundException.new = function(valueType, widgetType) {
    this[valueType$] = valueType;
    this[widgetType$] = widgetType;
    ;
  }).prototype = provider.ProviderNotFoundException.prototype;
  dart.addTypeTests(provider.ProviderNotFoundException);
  dart.addTypeCaches(provider.ProviderNotFoundException);
  provider.ProviderNotFoundException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(provider.ProviderNotFoundException, () => ({
    __proto__: dart.getMethods(provider.ProviderNotFoundException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(provider.ProviderNotFoundException, I[1]);
  dart.setFieldSignature(provider.ProviderNotFoundException, () => ({
    __proto__: dart.getFields(provider.ProviderNotFoundException.__proto__),
    valueType: dart.finalFieldType(dart.legacy(core.Type)),
    widgetType: dart.finalFieldType(dart.legacy(core.Type))
  }));
  dart.defineExtensionMethods(provider.ProviderNotFoundException, ['toString']);
  const _is__InheritedProviderElement_default = Symbol('_is__InheritedProviderElement_default');
  provider._InheritedProviderElement$ = dart.generic(T => {
    class _InheritedProviderElement extends nested.SingleChildStatelessElement {
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this.visitChildren(dart.fn(e => e.debugFillProperties(properties), T$.ElementLTovoid()));
      }
    }
    (_InheritedProviderElement.new = function(widget) {
      _InheritedProviderElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderElement.prototype;
    dart.addTypeTests(_InheritedProviderElement);
    _InheritedProviderElement.prototype[_is__InheritedProviderElement_default] = true;
    dart.addTypeCaches(_InheritedProviderElement);
    dart.setMethodSignature(_InheritedProviderElement, () => ({
      __proto__: dart.getMethods(_InheritedProviderElement.__proto__),
      debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
    }));
    dart.setLibraryUri(_InheritedProviderElement, I[1]);
    return _InheritedProviderElement;
  });
  provider._InheritedProviderElement = provider._InheritedProviderElement$();
  dart.addTypeTests(provider._InheritedProviderElement, _is__InheritedProviderElement_default);
  const _is_InheritedContext_default = Symbol('_is_InheritedContext_default');
  provider.InheritedContext$ = dart.generic(T => {
    class InheritedContext extends framework.BuildContext {}
    (InheritedContext.new = function() {
      ;
    }).prototype = InheritedContext.prototype;
    dart.addTypeTests(InheritedContext);
    InheritedContext.prototype[_is_InheritedContext_default] = true;
    dart.addTypeCaches(InheritedContext);
    dart.setLibraryUri(InheritedContext, I[1]);
    return InheritedContext;
  });
  provider.InheritedContext = provider.InheritedContext$();
  dart.addTypeTests(provider.InheritedContext, _is_InheritedContext_default);
  var owner$ = dart.privateName(provider, "_InheritedProviderScope.owner");
  const _is__InheritedProviderScope_default = Symbol('_is__InheritedProviderScope_default');
  provider._InheritedProviderScope$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _InheritedProviderScopeElementOfTL = () => (_InheritedProviderScopeElementOfTL = dart.constFn(provider._InheritedProviderScopeElement$(TL())))();
    class _InheritedProviderScope extends framework.InheritedWidget {
      get owner() {
        return this[owner$];
      }
      set owner(value) {
        super.owner = value;
      }
      updateShouldNotify(oldWidget) {
        T$.InheritedWidgetL().as(oldWidget);
        return false;
      }
      createElement() {
        return new (_InheritedProviderScopeElementOfTL()).new(this);
      }
    }
    (_InheritedProviderScope.new = function(opts) {
      let owner = opts && 'owner' in opts ? opts.owner : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[owner$] = owner;
      _InheritedProviderScope.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = _InheritedProviderScope.prototype;
    dart.addTypeTests(_InheritedProviderScope);
    _InheritedProviderScope.prototype[_is__InheritedProviderScope_default] = true;
    dart.addTypeCaches(_InheritedProviderScope);
    dart.setMethodSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getMethods(_InheritedProviderScope.__proto__),
      updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      createElement: dart.fnType(dart.legacy(provider._InheritedProviderScopeElement$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(_InheritedProviderScope, I[1]);
    dart.setFieldSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getFields(_InheritedProviderScope.__proto__),
      owner: dart.finalFieldType(dart.legacy(provider.InheritedProvider$(dart.legacy(T))))
    }));
    return _InheritedProviderScope;
  });
  provider._InheritedProviderScope = provider._InheritedProviderScope$();
  dart.addTypeTests(provider._InheritedProviderScope, _is__InheritedProviderScope_default);
  const _is__Dependency_default = Symbol('_is__Dependency_default');
  provider._Dependency$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLToboolL = () => (TLToboolL = dart.constFn(dart.fnType(T$.boolL(), [TL()])))();
    var TLToLboolL = () => (TLToLboolL = dart.constFn(dart.legacy(TLToboolL())))();
    var JSArrayOfTLToLboolL = () => (JSArrayOfTLToLboolL = dart.constFn(_interceptors.JSArray$(TLToLboolL())))();
    class _Dependency extends core.Object {}
    (_Dependency.new = function() {
      this.shouldClearSelectors = false;
      this.shouldClearMutationScheduled = false;
      this.selectors = JSArrayOfTLToLboolL().of([]);
      ;
    }).prototype = _Dependency.prototype;
    dart.addTypeTests(_Dependency);
    _Dependency.prototype[_is__Dependency_default] = true;
    dart.addTypeCaches(_Dependency);
    dart.setLibraryUri(_Dependency, I[1]);
    dart.setFieldSignature(_Dependency, () => ({
      __proto__: dart.getFields(_Dependency.__proto__),
      shouldClearSelectors: dart.fieldType(dart.legacy(core.bool)),
      shouldClearMutationScheduled: dart.fieldType(dart.legacy(core.bool)),
      selectors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)])))))
    }));
    return _Dependency;
  });
  provider._Dependency = provider._Dependency$();
  dart.addTypeTests(provider._Dependency, _is__Dependency_default);
  var _shouldNotifyDependents = dart.privateName(provider, "_shouldNotifyDependents");
  var _debugInheritLocked = dart.privateName(provider, "_debugInheritLocked");
  var _isNotifyDependentsEnabled = dart.privateName(provider, "_isNotifyDependentsEnabled");
  var _firstBuild = dart.privateName(provider, "_firstBuild");
  var _updatedShouldNotify = dart.privateName(provider, "_updatedShouldNotify");
  var _isBuildFromExternalSources = dart.privateName(provider, "_isBuildFromExternalSources");
  var _delegateState = dart.privateName(provider, "_delegateState");
  var _debugSetInheritedLock = dart.privateName(provider, "_debugSetInheritedLock");
  const _is__InheritedProviderScopeElement_default = Symbol('_is__InheritedProviderScopeElement_default');
  provider._InheritedProviderScopeElement$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _InheritedProviderScopeOfTL = () => (_InheritedProviderScopeOfTL = dart.constFn(provider._InheritedProviderScope$(TL())))();
    var _InheritedProviderScopeLOfTL = () => (_InheritedProviderScopeLOfTL = dart.constFn(dart.legacy(_InheritedProviderScopeOfTL())))();
    var _DependencyOfTL = () => (_DependencyOfTL = dart.constFn(provider._Dependency$(TL())))();
    var _DependencyLOfTL = () => (_DependencyLOfTL = dart.constFn(dart.legacy(_DependencyOfTL())))();
    var TLToboolL = () => (TLToboolL = dart.constFn(dart.fnType(T$.boolL(), [TL()])))();
    var TLToLboolL = () => (TLToLboolL = dart.constFn(dart.legacy(TLToboolL())))();
    var ListOfTLToLboolL = () => (ListOfTLToLboolL = dart.constFn(core.List$(TLToLboolL())))();
    var ListLOfTLToLboolL = () => (ListLOfTLToLboolL = dart.constFn(dart.legacy(ListOfTLToLboolL())))();
    class _InheritedProviderScopeElement extends framework.InheritedElement {
      get widget() {
        return _InheritedProviderScopeLOfTL().as(super.widget);
      }
      reassemble() {
        super.reassemble();
        let value = dart.test(this[_delegateState].hasValue) ? this[_delegateState].value : null;
        if (T$.ReassembleHandlerL().is(value)) {
          value.reassemble();
        }
      }
      updateDependencies(dependent, aspect) {
        let t0;
        let dependencies = this.getDependencies(dependent);
        if (dependencies != null && !_DependencyLOfTL().is(dependencies)) {
          return;
        }
        if (TLToLboolL().is(aspect)) {
          let selectorDependency = _DependencyLOfTL().as((t0 = dependencies, t0 == null ? new (_DependencyOfTL()).new() : t0));
          if (dart.test(selectorDependency.shouldClearSelectors)) {
            selectorDependency.shouldClearSelectors = false;
            ListLOfTLToLboolL().as(selectorDependency.selectors)[$clear]();
          }
          if (selectorDependency.shouldClearMutationScheduled === false) {
            selectorDependency.shouldClearMutationScheduled = true;
            binding.SchedulerBinding.instance.addPostFrameCallback(dart.fn(_ => {
              let t0;
              t0 = selectorDependency;
              (() => {
                t0.shouldClearMutationScheduled = false;
                t0.shouldClearSelectors = true;
                return t0;
              })();
            }, T$.DurationLToNull()));
          }
          ListLOfTLToLboolL().as(selectorDependency.selectors)[$add](aspect);
          this.setDependencies(dependent, selectorDependency);
        } else {
          this.setDependencies(dependent, C[10] || CT.C10);
        }
      }
      notifyDependent(oldWidget, dependent) {
        T$.InheritedWidgetL().as(oldWidget);
        let dependencies = this.getDependencies(dependent);
        let shouldNotify = false;
        if (dependencies != null) {
          if (_DependencyLOfTL().is(dependencies)) {
            if (dart.test(dependent.dirty)) {
              return;
            }
            for (let updateShouldNotify of ListLOfTLToLboolL().as(dependencies.selectors)) {
              try {
                if (!dart.test(dart.fn(() => {
                  provider._debugIsSelecting = true;
                  return true;
                }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 395, 20, "() {\n              _debugIsSelecting = true;\n              return true;\n            }()");
                shouldNotify = updateShouldNotify(this.value);
              } finally {
                if (!dart.test(dart.fn(() => {
                  provider._debugIsSelecting = false;
                  return true;
                }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 401, 20, "() {\n              _debugIsSelecting = false;\n              return true;\n            }()");
              }
              if (dart.test(shouldNotify)) {
                break;
              }
            }
          } else {
            shouldNotify = true;
          }
        }
        if (dart.test(shouldNotify)) {
          dependent.didChangeDependencies();
        }
      }
      performRebuild() {
        let t0;
        if (dart.test(this[_firstBuild])) {
          this[_firstBuild] = false;
          this[_delegateState] = (t0 = this.widget.owner[_delegate].createState(), (() => {
            t0.element = this;
            return t0;
          })());
        }
        super.performRebuild();
      }
      update(newWidget) {
        _InheritedProviderScopeLOfTL().as(newWidget);
        if (!dart.test(dart.fn(() => {
          if (!dart.equals(dart.runtimeType(this.widget.owner[_delegate]), dart.runtimeType(newWidget.owner[_delegate]))) {
            dart.throw(new core.StateError.new("Rebuilt " + dart.str(this.widget) + " using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n"));
          }
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 431, 12, "() {\n      if (widget.owner._delegate.runtimeType !=\n          newWidget.owner._delegate.runtimeType) {\n        throw StateError('''\nRebuilt $widget using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n''');\n      }\n      return true;\n    }()");
        this[_isBuildFromExternalSources] = true;
        this[_updatedShouldNotify] = this[_delegateState].willUpdateDelegate(newWidget.owner[_delegate]);
        super.update(newWidget);
        this[_updatedShouldNotify] = false;
      }
      updated(oldWidget) {
        T$.InheritedWidgetL().as(oldWidget);
        super.updated(oldWidget);
        if (dart.test(this[_updatedShouldNotify])) {
          this.notifyClients(oldWidget);
        }
      }
      didChangeDependencies() {
        this[_isBuildFromExternalSources] = true;
        super.didChangeDependencies();
      }
      build() {
        if (this.widget.owner[_lazy] === false) {
          this.value;
        }
        this[_delegateState].build({isBuildFromExternalSources: this[_isBuildFromExternalSources]});
        this[_isBuildFromExternalSources] = false;
        if (dart.test(this[_shouldNotifyDependents])) {
          this[_shouldNotifyDependents] = false;
          this.notifyClients(this.widget);
        }
        return super.build();
      }
      unmount() {
        this[_delegateState].dispose();
        super.unmount();
      }
      get hasValue() {
        return this[_delegateState].hasValue;
      }
      markNeedsNotifyDependents() {
        if (!dart.test(this[_isNotifyDependentsEnabled])) {
          return;
        }
        this.markNeedsBuild();
        this[_shouldNotifyDependents] = true;
      }
      [_debugSetInheritedLock](value) {
        if (!dart.test(dart.fn(() => {
          this[_debugInheritLocked] = value;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 501, 12, "() {\n      _debugInheritLocked = value;\n      return true;\n    }()");
        return true;
      }
      get value() {
        return this[_delegateState].value;
      }
      dependOnInheritedElement(ancestor, opts) {
        let aspect = opts && 'aspect' in opts ? opts.aspect : null;
        if (!dart.test(dart.fn(() => {
          if (dart.test(this[_debugInheritLocked])) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNodeL().of([new assertions.ErrorSummary.new("Tried to listen to an InheritedWidget " + "in a life-cycle that will never be called again."), new assertions.ErrorDescription.new("This error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n")])));
          }
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 516, 12, "() {\n      if (_debugInheritLocked) {\n        throw FlutterError.fromParts(\n          <DiagnosticsNode>[\n            ErrorSummary(\n              'Tried to listen to an InheritedWidget '\n              'in a life-cycle that will never be called again.',\n            ),\n            ErrorDescription('''\nThis error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n'''),\n          ],\n        );\n      }\n      return true;\n    }()");
        return super.dependOnInheritedElement(ancestor, {aspect: aspect});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegateState].debugFillProperties(properties);
      }
    }
    (_InheritedProviderScopeElement.new = function(widget) {
      this[_shouldNotifyDependents] = false;
      this[_debugInheritLocked] = false;
      this[_isNotifyDependentsEnabled] = true;
      this[_firstBuild] = true;
      this[_updatedShouldNotify] = false;
      this[_isBuildFromExternalSources] = false;
      this[_delegateState] = null;
      _InheritedProviderScopeElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderScopeElement.prototype;
    dart.addTypeTests(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement.prototype[_is__InheritedProviderScopeElement_default] = true;
    dart.addTypeCaches(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement[dart.implements] = () => [provider.InheritedContext$(dart.legacy(T))];
    dart.setMethodSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getMethods(_InheritedProviderScopeElement.__proto__),
      updateDependencies: dart.fnType(dart.void, [dart.legacy(framework.Element), dart.legacy(core.Object)]),
      notifyDependent: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(framework.Element)]),
      update: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      updated: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      build: dart.fnType(dart.legacy(framework.Widget), []),
      markNeedsNotifyDependents: dart.fnType(dart.void, []),
      [_debugSetInheritedLock]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.bool)]),
      dependOnInheritedElement: dart.fnType(dart.legacy(framework.InheritedWidget), [dart.legacy(framework.InheritedElement)], {aspect: dart.legacy(core.Object)}, {}),
      debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
    }));
    dart.setGetterSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getGetters(_InheritedProviderScopeElement.__proto__),
      widget: dart.legacy(provider._InheritedProviderScope$(dart.legacy(T))),
      hasValue: dart.legacy(core.bool),
      value: dart.legacy(T)
    }));
    dart.setLibraryUri(_InheritedProviderScopeElement, I[1]);
    dart.setFieldSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getFields(_InheritedProviderScopeElement.__proto__),
      [_shouldNotifyDependents]: dart.fieldType(dart.legacy(core.bool)),
      [_debugInheritLocked]: dart.fieldType(dart.legacy(core.bool)),
      [_isNotifyDependentsEnabled]: dart.fieldType(dart.legacy(core.bool)),
      [_firstBuild]: dart.fieldType(dart.legacy(core.bool)),
      [_updatedShouldNotify]: dart.fieldType(dart.legacy(core.bool)),
      [_isBuildFromExternalSources]: dart.fieldType(dart.legacy(core.bool)),
      [_delegateState]: dart.fieldType(dart.legacy(provider._DelegateState$(dart.legacy(T), dart.legacy(provider._Delegate$(dart.legacy(T))))))
    }));
    return _InheritedProviderScopeElement;
  });
  provider._InheritedProviderScopeElement = provider._InheritedProviderScopeElement$();
  dart.addTypeTests(provider._InheritedProviderScopeElement, _is__InheritedProviderScopeElement_default);
  const _is__Delegate_default = Symbol('_is__Delegate_default');
  provider._Delegate$ = dart.generic(T => {
    class _Delegate extends core.Object {
      debugFillProperties(properties) {
      }
    }
    (_Delegate.new = function() {
      ;
    }).prototype = _Delegate.prototype;
    dart.addTypeTests(_Delegate);
    _Delegate.prototype[_is__Delegate_default] = true;
    dart.addTypeCaches(_Delegate);
    dart.setMethodSignature(_Delegate, () => ({
      __proto__: dart.getMethods(_Delegate.__proto__),
      debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
    }));
    dart.setLibraryUri(_Delegate, I[1]);
    return _Delegate;
  });
  provider._Delegate = provider._Delegate$();
  dart.addTypeTests(provider._Delegate, _is__Delegate_default);
  var element = dart.privateName(provider, "_DelegateState.element");
  const _is__DelegateState_default = Symbol('_is__DelegateState_default');
  provider._DelegateState$ = dart.generic((T, D) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _InheritedProviderScopeElementOfTL = () => (_InheritedProviderScopeElementOfTL = dart.constFn(provider._InheritedProviderScopeElement$(TL())))();
    var _InheritedProviderScopeElementLOfTL = () => (_InheritedProviderScopeElementLOfTL = dart.constFn(dart.legacy(_InheritedProviderScopeElementOfTL())))();
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    class _DelegateState extends core.Object {
      get element() {
        return this[element];
      }
      set element(value) {
        this[element] = _InheritedProviderScopeElementLOfTL().as(value);
      }
      get delegate() {
        return DL().as(this.element.widget.owner[_delegate]);
      }
      debugSetInheritedLock(value) {
        return this.element[_debugSetInheritedLock](value);
      }
      willUpdateDelegate(newDelegate) {
        DL().as(newDelegate);
        return false;
      }
      dispose() {
      }
      debugFillProperties(properties) {
      }
      build(opts) {
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
      }
    }
    (_DelegateState.new = function() {
      this[element] = null;
      ;
    }).prototype = _DelegateState.prototype;
    dart.addTypeTests(_DelegateState);
    _DelegateState.prototype[_is__DelegateState_default] = true;
    dart.addTypeCaches(_DelegateState);
    dart.setMethodSignature(_DelegateState, () => ({
      __proto__: dart.getMethods(_DelegateState.__proto__),
      debugSetInheritedLock: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.bool)]),
      willUpdateDelegate: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      dispose: dart.fnType(dart.void, []),
      debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)]),
      build: dart.fnType(dart.void, [], {isBuildFromExternalSources: dart.legacy(core.bool)}, {})
    }));
    dart.setGetterSignature(_DelegateState, () => ({
      __proto__: dart.getGetters(_DelegateState.__proto__),
      delegate: dart.legacy(D)
    }));
    dart.setLibraryUri(_DelegateState, I[1]);
    dart.setFieldSignature(_DelegateState, () => ({
      __proto__: dart.getFields(_DelegateState.__proto__),
      element: dart.fieldType(dart.legacy(provider._InheritedProviderScopeElement$(dart.legacy(T))))
    }));
    return _DelegateState;
  });
  provider._DelegateState = provider._DelegateState$();
  dart.addTypeTests(provider._DelegateState, _is__DelegateState_default);
  var _updateShouldNotify = dart.privateName(provider, "_updateShouldNotify");
  const _is__CreateInheritedProvider_default = Symbol('_is__CreateInheritedProvider_default');
  provider._CreateInheritedProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CreateInheritedProviderStateOfTL = () => (_CreateInheritedProviderStateOfTL = dart.constFn(provider._CreateInheritedProviderState$(TL())))();
    class _CreateInheritedProvider extends provider._Delegate$(dart.legacy(T)) {
      createState() {
        return new (_CreateInheritedProviderStateOfTL()).new();
      }
    }
    (_CreateInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      this.create = create;
      this.update = update;
      this.debugCheckInvalidValueType = debugCheckInvalidValueType;
      this.startListening = startListening;
      this.dispose = dispose;
      if (!(create != null || update != null)) dart.assertFailed(null, I[2], 593, 16, "create != null || update != null");
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _CreateInheritedProvider.prototype;
    dart.addTypeTests(_CreateInheritedProvider);
    _CreateInheritedProvider.prototype[_is__CreateInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateInheritedProvider);
    dart.setMethodSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateInheritedProvider.__proto__),
      createState: dart.fnType(dart.legacy(provider._CreateInheritedProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(_CreateInheritedProvider, I[1]);
    dart.setFieldSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.BuildContext)]))),
      update: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.BuildContext), dart.legacy(T)]))),
      [_updateShouldNotify]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))),
      debugCheckInvalidValueType: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))),
      startListening: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(provider.InheritedContext$(dart.legacy(T))), dart.legacy(T)]))),
      dispose: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.BuildContext), dart.legacy(T)])))
    }));
    return _CreateInheritedProvider;
  });
  provider._CreateInheritedProvider = provider._CreateInheritedProvider$();
  dart.addTypeTests(provider._CreateInheritedProvider, _is__CreateInheritedProvider_default);
  var _removeListener = dart.privateName(provider, "_removeListener");
  var _didInitValue = dart.privateName(provider, "_didInitValue");
  var _value = dart.privateName(provider, "_value");
  var _previousWidget = dart.privateName(provider, "_previousWidget");
  const _is__CreateInheritedProviderState_default = Symbol('_is__CreateInheritedProviderState_default');
  provider._CreateInheritedProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLTovoid = () => (TLTovoid = dart.constFn(dart.fnType(dart.void, [TL()])))();
    var TLToLvoid = () => (TLToLvoid = dart.constFn(dart.legacy(TLTovoid())))();
    var BuildContextLAndTLToTL = () => (BuildContextLAndTLToTL = dart.constFn(dart.fnType(TL(), [T$.BuildContextL(), TL()])))();
    var BuildContextLAndTLToLTL = () => (BuildContextLAndTLToLTL = dart.constFn(dart.legacy(BuildContextLAndTLToTL())))();
    var InheritedContextOfTL = () => (InheritedContextOfTL = dart.constFn(provider.InheritedContext$(TL())))();
    var InheritedContextLOfTL = () => (InheritedContextLOfTL = dart.constFn(dart.legacy(InheritedContextOfTL())))();
    var InheritedContextLOfTLAndTLToFn = () => (InheritedContextLOfTLAndTLToFn = dart.constFn(dart.fnType(T$.VoidToLvoid(), [InheritedContextLOfTL(), TL()])))();
    var InheritedContextLOfTLAndTLToLFn = () => (InheritedContextLOfTLAndTLToLFn = dart.constFn(dart.legacy(InheritedContextLOfTLAndTLToFn())))();
    var BuildContextLAndTLTovoid = () => (BuildContextLAndTLTovoid = dart.constFn(dart.fnType(dart.void, [T$.BuildContextL(), TL()])))();
    var BuildContextLAndTLToLvoid = () => (BuildContextLAndTLToLvoid = dart.constFn(dart.legacy(BuildContextLAndTLTovoid())))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    var TLAndTLToboolL = () => (TLAndTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [TL(), TL()])))();
    var TLAndTLToLboolL = () => (TLAndTLToLboolL = dart.constFn(dart.legacy(TLAndTLToboolL())))();
    class _CreateInheritedProviderState extends provider._DelegateState$(dart.legacy(T), dart.legacy(provider._CreateInheritedProvider$(dart.legacy(T)))) {
      get value() {
        let t1, t0, t2, t1$, t0$, t0$0;
        let _debugPreviousIsInInheritedProviderCreate = null;
        let _debugPreviousIsInInheritedProviderUpdate = null;
        if (!dart.test(dart.fn(() => {
          _debugPreviousIsInInheritedProviderCreate = provider.debugIsInInheritedProviderCreate;
          _debugPreviousIsInInheritedProviderUpdate = provider.debugIsInInheritedProviderUpdate;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 628, 12, "() {\n      _debugPreviousIsInInheritedProviderCreate =\n          debugIsInInheritedProviderCreate;\n      _debugPreviousIsInInheritedProviderUpdate =\n          debugIsInInheritedProviderUpdate;\n      return true;\n    }()");
        if (!dart.test(this[_didInitValue])) {
          this[_didInitValue] = true;
          if (this.delegate.create != null) {
            if (!dart.test(this.debugSetInheritedLock(true))) dart.assertFailed(null, I[2], 639, 16, "debugSetInheritedLock(true)");
            try {
              if (!dart.test(dart.fn(() => {
                provider.debugIsInInheritedProviderCreate = true;
                provider.debugIsInInheritedProviderUpdate = false;
                return true;
              }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 641, 18, "() {\n            debugIsInInheritedProviderCreate = true;\n            debugIsInInheritedProviderUpdate = false;\n            return true;\n          }()");
              this[_value] = (t0 = this.delegate, t1 = this.element, t0.create(t1));
            } finally {
              if (!dart.test(dart.fn(() => {
                provider.debugIsInInheritedProviderCreate = _debugPreviousIsInInheritedProviderCreate;
                provider.debugIsInInheritedProviderUpdate = _debugPreviousIsInInheritedProviderUpdate;
                return true;
              }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 648, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate;\n            return true;\n          }()");
            }
            if (!dart.test(this.debugSetInheritedLock(false))) dart.assertFailed(null, I[2], 656, 16, "debugSetInheritedLock(false)");
            if (!dart.test(dart.fn(() => {
              let t0;
              t0 = TLToLvoid().as(this.delegate.debugCheckInvalidValueType);
              t0 == null ? null : t0(this[_value]);
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 658, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value);\n          return true;\n        }()");
          }
          if (BuildContextLAndTLToLTL().as(this.delegate.update) != null) {
            try {
              if (!dart.test(dart.fn(() => {
                provider.debugIsInInheritedProviderCreate = false;
                provider.debugIsInInheritedProviderUpdate = true;
                return true;
              }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 665, 18, "() {\n            debugIsInInheritedProviderCreate = false;\n            debugIsInInheritedProviderUpdate = true;\n            return true;\n          }()");
              this[_value] = (t0$ = this.delegate, t1$ = this.element, t2 = this[_value], BuildContextLAndTLToLTL().as(t0$.update)(t1$, t2));
            } finally {
              if (!dart.test(dart.fn(() => {
                provider.debugIsInInheritedProviderCreate = _debugPreviousIsInInheritedProviderCreate;
                provider.debugIsInInheritedProviderUpdate = _debugPreviousIsInInheritedProviderUpdate;
                return true;
              }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 672, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate;\n            return true;\n          }()");
            }
            if (!dart.test(dart.fn(() => {
              let t0;
              t0 = TLToLvoid().as(this.delegate.debugCheckInvalidValueType);
              t0 == null ? null : t0(this[_value]);
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 681, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value);\n          return true;\n        }()");
          }
        }
        this.element[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t0$0 = InheritedContextLOfTLAndTLToLFn().as(this.delegate.startListening), t0$0 == null ? null : t0$0(this.element, this[_value])) : null;
        this.element[_isNotifyDependentsEnabled] = true;
        if (!(InheritedContextLOfTLAndTLToLFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[2], 691, 12, "delegate.startListening == null || _removeListener != null");
        return this[_value];
      }
      dispose() {
        let t0, t0$;
        super.dispose();
        t0 = this[_removeListener];
        t0 == null ? null : t0();
        if (dart.test(this[_didInitValue])) {
          t0$ = BuildContextLAndTLToLvoid().as(this.delegate.dispose);
          t0$ == null ? null : t0$(this.element, this[_value]);
        }
      }
      debugFillProperties(properties) {
        let t0;
        super.debugFillProperties(properties);
        if (dart.test(this[_didInitValue])) {
          t0 = properties;
          (() => {
            t0.add(new (DiagnosticsPropertyOfTL()).new("value", this.value));
            t0.add(new diagnostics.FlagProperty.new(null, {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
            return t0;
          })();
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
      build(opts) {
        let t2, t1, t0, t2$, t1$, t0$, t0$0, t0$1;
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
        let shouldNotify = false;
        if (dart.test(isBuildFromExternalSources) && dart.test(this[_didInitValue]) && BuildContextLAndTLToLTL().as(this.delegate.update) != null) {
          let previousValue = this[_value];
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.test(dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 742, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.test(dart.fn(() => {
              provider.debugIsInInheritedProviderCreate = false;
              provider.debugIsInInheritedProviderUpdate = true;
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 750, 16, "() {\n          debugIsInInheritedProviderCreate = false;\n          debugIsInInheritedProviderUpdate = true;\n          return true;\n        }()");
            this[_value] = (t0 = this.delegate, t1 = this.element, t2 = this[_value], BuildContextLAndTLToLTL().as(t0.update)(t1, t2));
          } finally {
            if (!dart.test(dart.fn(() => {
              provider.debugIsInInheritedProviderCreate = _debugPreviousIsInInheritedProviderCreate;
              provider.debugIsInInheritedProviderUpdate = _debugPreviousIsInInheritedProviderUpdate;
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 757, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate;\n          return true;\n        }()");
          }
          if (TLAndTLToLboolL().as(this.delegate[_updateShouldNotify]) != null) {
            shouldNotify = (t0$ = this.delegate, t1$ = previousValue, t2$ = this[_value], TLAndTLToLboolL().as(t0$[_updateShouldNotify])(t1$, t2$));
          } else {
            shouldNotify = !dart.equals(this[_value], previousValue);
          }
          if (dart.test(shouldNotify)) {
            if (!dart.test(dart.fn(() => {
              let t0;
              t0 = TLToLvoid().as(this.delegate.debugCheckInvalidValueType);
              t0 == null ? null : t0(this[_value]);
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 773, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value);\n          return true;\n        }()");
            if (this[_removeListener] != null) {
              this[_removeListener]();
              this[_removeListener] = null;
            }
            t0$1 = (t0$0 = this[_previousWidget], t0$0 == null ? null : BuildContextLAndTLToLvoid().as(t0$0.dispose));
            t0$1 == null ? null : t0$1(this.element, previousValue);
          }
        }
        if (dart.test(shouldNotify)) {
          this.element[_shouldNotifyDependents] = true;
        }
        this[_previousWidget] = this.delegate;
        return super.build({isBuildFromExternalSources: isBuildFromExternalSources});
      }
      get hasValue() {
        return this[_didInitValue];
      }
    }
    (_CreateInheritedProviderState.new = function() {
      this[_removeListener] = null;
      this[_didInitValue] = false;
      this[_value] = null;
      this[_previousWidget] = null;
      _CreateInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _CreateInheritedProviderState.prototype;
    dart.addTypeTests(_CreateInheritedProviderState);
    _CreateInheritedProviderState.prototype[_is__CreateInheritedProviderState_default] = true;
    dart.addTypeCaches(_CreateInheritedProviderState);
    dart.setGetterSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getGetters(_CreateInheritedProviderState.__proto__),
      value: dart.legacy(T),
      hasValue: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(_CreateInheritedProviderState, I[1]);
    dart.setFieldSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getFields(_CreateInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_didInitValue]: dart.fieldType(dart.legacy(core.bool)),
      [_value]: dart.fieldType(dart.legacy(T)),
      [_previousWidget]: dart.fieldType(dart.legacy(provider._CreateInheritedProvider$(dart.legacy(T))))
    }));
    return _CreateInheritedProviderState;
  });
  provider._CreateInheritedProviderState = provider._CreateInheritedProviderState$();
  dart.addTypeTests(provider._CreateInheritedProviderState, _is__CreateInheritedProviderState_default);
  const _is__ValueInheritedProvider_default = Symbol('_is__ValueInheritedProvider_default');
  provider._ValueInheritedProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    var _ValueInheritedProviderStateOfTL = () => (_ValueInheritedProviderStateOfTL = dart.constFn(provider._ValueInheritedProviderState$(TL())))();
    class _ValueInheritedProvider extends provider._Delegate$(dart.legacy(T)) {
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (DiagnosticsPropertyOfTL()).new("value", this.value));
      }
      createState() {
        return new (_ValueInheritedProviderStateOfTL()).new();
      }
    }
    (_ValueInheritedProvider.new = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.value = value;
      this.startListening = startListening;
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _ValueInheritedProvider.prototype;
    dart.addTypeTests(_ValueInheritedProvider);
    _ValueInheritedProvider.prototype[_is__ValueInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueInheritedProvider);
    dart.setMethodSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueInheritedProvider.__proto__),
      createState: dart.fnType(dart.legacy(provider._ValueInheritedProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(_ValueInheritedProvider, I[1]);
    dart.setFieldSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueInheritedProvider.__proto__),
      value: dart.finalFieldType(dart.legacy(T)),
      [_updateShouldNotify]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))),
      startListening: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(provider.InheritedContext$(dart.legacy(T))), dart.legacy(T)])))
    }));
    return _ValueInheritedProvider;
  });
  provider._ValueInheritedProvider = provider._ValueInheritedProvider$();
  dart.addTypeTests(provider._ValueInheritedProvider, _is__ValueInheritedProvider_default);
  const _is__ValueInheritedProviderState_default = Symbol('_is__ValueInheritedProviderState_default');
  provider._ValueInheritedProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var InheritedContextOfTL = () => (InheritedContextOfTL = dart.constFn(provider.InheritedContext$(TL())))();
    var InheritedContextLOfTL = () => (InheritedContextLOfTL = dart.constFn(dart.legacy(InheritedContextOfTL())))();
    var InheritedContextLOfTLAndTLToFn = () => (InheritedContextLOfTLAndTLToFn = dart.constFn(dart.fnType(T$.VoidToLvoid(), [InheritedContextLOfTL(), TL()])))();
    var InheritedContextLOfTLAndTLToLFn = () => (InheritedContextLOfTLAndTLToLFn = dart.constFn(dart.legacy(InheritedContextLOfTLAndTLToFn())))();
    var _ValueInheritedProviderOfTL = () => (_ValueInheritedProviderOfTL = dart.constFn(provider._ValueInheritedProvider$(TL())))();
    var _ValueInheritedProviderLOfTL = () => (_ValueInheritedProviderLOfTL = dart.constFn(dart.legacy(_ValueInheritedProviderOfTL())))();
    var TLAndTLToboolL = () => (TLAndTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [TL(), TL()])))();
    var TLAndTLToLboolL = () => (TLAndTLToLboolL = dart.constFn(dart.legacy(TLAndTLToboolL())))();
    class _ValueInheritedProviderState extends provider._DelegateState$(dart.legacy(T), dart.legacy(provider._ValueInheritedProvider$(dart.legacy(T)))) {
      get value() {
        let t0;
        this.element[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t0 = InheritedContextLOfTLAndTLToLFn().as(this.delegate.startListening), t0 == null ? null : t0(this.element, this.delegate.value)) : null;
        this.element[_isNotifyDependentsEnabled] = true;
        if (!(InheritedContextLOfTLAndTLToLFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[2], 828, 12, "delegate.startListening == null || _removeListener != null");
        return this.delegate.value;
      }
      willUpdateDelegate(newDelegate) {
        let t2, t1, t0;
        _ValueInheritedProviderLOfTL().as(newDelegate);
        let shouldNotify = null;
        if (TLAndTLToLboolL().as(this.delegate[_updateShouldNotify]) != null) {
          shouldNotify = (t0 = this.delegate, t1 = this.delegate.value, t2 = newDelegate.value, TLAndTLToLboolL().as(t0[_updateShouldNotify])(t1, t2));
        } else {
          shouldNotify = !dart.equals(newDelegate.value, this.delegate.value);
        }
        if (dart.test(shouldNotify) && this[_removeListener] != null) {
          this[_removeListener]();
          this[_removeListener] = null;
        }
        return shouldNotify;
      }
      dispose() {
        let t0;
        super.dispose();
        t0 = this[_removeListener];
        t0 == null ? null : t0();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new diagnostics.FlagProperty.new(null, {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
      }
      get hasValue() {
        return true;
      }
    }
    (_ValueInheritedProviderState.new = function() {
      this[_removeListener] = null;
      _ValueInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueInheritedProviderState.prototype;
    dart.addTypeTests(_ValueInheritedProviderState);
    _ValueInheritedProviderState.prototype[_is__ValueInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueInheritedProviderState);
    dart.setGetterSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueInheritedProviderState.__proto__),
      value: dart.legacy(T),
      hasValue: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(_ValueInheritedProviderState, I[1]);
    dart.setFieldSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getFields(_ValueInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return _ValueInheritedProviderState;
  });
  provider._ValueInheritedProviderState = provider._ValueInheritedProviderState$();
  dart.addTypeTests(provider._ValueInheritedProviderState, _is__ValueInheritedProviderState_default);
  const _is_DeferredInheritedProvider_default = Symbol('_is_DeferredInheritedProvider_default');
  provider.DeferredInheritedProvider$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CreateDeferredInheritedProviderOfTL$RL = () => (_CreateDeferredInheritedProviderOfTL$RL = dart.constFn(provider._CreateDeferredInheritedProvider$(TL(), RL())))();
    var _ValueDeferredInheritedProviderOfTL$RL = () => (_ValueDeferredInheritedProviderOfTL$RL = dart.constFn(provider._ValueDeferredInheritedProvider$(TL(), RL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class DeferredInheritedProvider extends provider.InheritedProvider$(dart.legacy(R)) {}
    (DeferredInheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, child: child, lazy: lazy, builder: builder, delegate: new (_CreateDeferredInheritedProviderOfTL$RL()).new({create: create, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: startListening}), $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    (DeferredInheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, lazy: lazy, builder: builder, delegate: new (_ValueDeferredInheritedProviderOfTL$RL()).new(value, updateShouldNotify, startListening), child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    dart.addTypeTests(DeferredInheritedProvider);
    DeferredInheritedProvider.prototype[_is_DeferredInheritedProvider_default] = true;
    dart.addTypeCaches(DeferredInheritedProvider);
    dart.setLibraryUri(DeferredInheritedProvider, I[1]);
    return DeferredInheritedProvider;
  });
  provider.DeferredInheritedProvider = provider.DeferredInheritedProvider$();
  dart.addTypeTests(provider.DeferredInheritedProvider, _is_DeferredInheritedProvider_default);
  const _is__DeferredDelegate_default = Symbol('_is__DeferredDelegate_default');
  provider._DeferredDelegate$ = dart.generic((T, R) => {
    class _DeferredDelegate extends provider._Delegate$(dart.legacy(R)) {}
    (_DeferredDelegate.new = function(updateShouldNotify, startListening) {
      this.updateShouldNotify = updateShouldNotify;
      this.startListening = startListening;
      ;
    }).prototype = _DeferredDelegate.prototype;
    dart.addTypeTests(_DeferredDelegate);
    _DeferredDelegate.prototype[_is__DeferredDelegate_default] = true;
    dart.addTypeCaches(_DeferredDelegate);
    dart.setLibraryUri(_DeferredDelegate, I[1]);
    dart.setFieldSignature(_DeferredDelegate, () => ({
      __proto__: dart.getFields(_DeferredDelegate.__proto__),
      updateShouldNotify: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(R), dart.legacy(R)]))),
      startListening: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(provider.InheritedContext$(dart.legacy(R))), dart.legacy(dart.fnType(dart.void, [dart.legacy(R)])), dart.legacy(T), dart.legacy(R)])))
    }));
    return _DeferredDelegate;
  });
  provider._DeferredDelegate = provider._DeferredDelegate$();
  dart.addTypeTests(provider._DeferredDelegate, _is__DeferredDelegate_default);
  var _hasValue = dart.privateName(provider, "_hasValue");
  const _is__DeferredDelegateState_default = Symbol('_is__DeferredDelegateState_default');
  provider._DeferredDelegateState$ = dart.generic((T, R, W) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var InheritedContextLOfRLAndFnAndTL__ToFn = () => (InheritedContextLOfRLAndFnAndTL__ToFn = dart.constFn(dart.fnType(T$.VoidToLvoid(), [InheritedContextLOfRL(), RLToLvoid(), TL(), RL()])))();
    var InheritedContextLOfRLAndFnAndTL__ToLFn = () => (InheritedContextLOfRLAndFnAndTL__ToLFn = dart.constFn(dart.legacy(InheritedContextLOfRLAndFnAndTL__ToFn())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    var InheritedContextOfRL = () => (InheritedContextOfRL = dart.constFn(provider.InheritedContext$(RL())))();
    var InheritedContextLOfRL = () => (InheritedContextLOfRL = dart.constFn(dart.legacy(InheritedContextOfRL())))();
    var RLTovoid = () => (RLTovoid = dart.constFn(dart.fnType(dart.void, [RL()])))();
    var RLToLvoid = () => (RLToLvoid = dart.constFn(dart.legacy(RLTovoid())))();
    var RLAndRLToboolL = () => (RLAndRLToboolL = dart.constFn(dart.fnType(T$.boolL(), [RL(), RL()])))();
    var RLAndRLToLboolL = () => (RLAndRLToLboolL = dart.constFn(dart.legacy(RLAndRLToboolL())))();
    class _DeferredDelegateState extends provider._DelegateState$(dart.legacy(R), dart.legacy(W)) {
      get value() {
        let t4, t3, t2, t1, t0;
        this.element[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t0 = this.delegate, t1 = this.element, t2 = dart.bind(this, 'setState'), t3 = this.controller, t4 = this[_value], InheritedContextLOfRLAndFnAndTL__ToLFn().as(t0.startListening)(t1, t2, t3, t4)) : null;
        this.element[_isNotifyDependentsEnabled] = true;
        if (!dart.test(this.element.hasValue)) dart.assertFailed("The callback \"startListening\" was called, but it left DeferredInhertitedProviderElement<" + dart.str(dart.wrapType(TL())) + ", " + dart.str(dart.wrapType(RL())) + ">\nin an unitialized state.\n\nIt is necessary for \"startListening\" to call \"setState\" at least once the very\nfirst time \"value\" is requested.\n\nTo fix, consider:\n\nDeferredInheritedProvider(\n  ...,\n  startListening: (element, setState, controller, value) {\n    if (!element.hasValue) {\n      setState(myInitialValue); // TODO replace myInitialValue with your own\n    }\n    ...\n  }\n)\n    ", I[3], 109, 12, "element.hasValue");
        if (!(this[_removeListener] != null)) dart.assertFailed(null, I[3], 128, 12, "_removeListener != null");
        return this[_value];
      }
      dispose() {
        let t0;
        super.dispose();
        t0 = this[_removeListener];
        t0 == null ? null : t0();
      }
      get isLoaded() {
        return this[_removeListener] != null;
      }
      get hasValue() {
        return this[_hasValue];
      }
      setState(value) {
        let t2, t1, t0;
        RL().as(value);
        if (dart.test(this[_hasValue])) {
          let shouldNotify = RLAndRLToLboolL().as(this.delegate.updateShouldNotify) != null ? (t0 = this.delegate, t1 = this[_value], t2 = value, RLAndRLToLboolL().as(t0.updateShouldNotify)(t1, t2)) : !dart.equals(this[_value], value);
          if (dart.test(shouldNotify)) {
            this.element.markNeedsNotifyDependents();
          }
        }
        this[_hasValue] = true;
        this[_value] = value;
      }
    }
    (_DeferredDelegateState.new = function() {
      this[_removeListener] = null;
      this[_value] = null;
      this[_hasValue] = false;
      _DeferredDelegateState.__proto__.new.call(this);
      ;
    }).prototype = _DeferredDelegateState.prototype;
    dart.addTypeTests(_DeferredDelegateState);
    _DeferredDelegateState.prototype[_is__DeferredDelegateState_default] = true;
    dart.addTypeCaches(_DeferredDelegateState);
    dart.setMethodSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getMethods(_DeferredDelegateState.__proto__),
      setState: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getGetters(_DeferredDelegateState.__proto__),
      value: dart.legacy(R),
      isLoaded: dart.legacy(core.bool),
      hasValue: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(_DeferredDelegateState, I[1]);
    dart.setFieldSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getFields(_DeferredDelegateState.__proto__),
      [_removeListener]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_value]: dart.fieldType(dart.legacy(R)),
      [_hasValue]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _DeferredDelegateState;
  });
  provider._DeferredDelegateState = provider._DeferredDelegateState$();
  dart.addTypeTests(provider._DeferredDelegateState, _is__DeferredDelegateState_default);
  const _is__CreateDeferredInheritedProvider_default = Symbol('_is__CreateDeferredInheritedProvider_default');
  provider._CreateDeferredInheritedProvider$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CreateDeferredInheritedProviderElementOfTL$RL = () => (_CreateDeferredInheritedProviderElementOfTL$RL = dart.constFn(provider._CreateDeferredInheritedProviderElement$(TL(), RL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class _CreateDeferredInheritedProvider extends provider._DeferredDelegate$(dart.legacy(T), dart.legacy(R)) {
      createState() {
        return new (_CreateDeferredInheritedProviderElementOfTL$RL()).new();
      }
    }
    (_CreateDeferredInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.create = create;
      this.dispose = dispose;
      _CreateDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _CreateDeferredInheritedProvider.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProvider);
    _CreateDeferredInheritedProvider.prototype[_is__CreateDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProvider);
    dart.setMethodSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateDeferredInheritedProvider.__proto__),
      createState: dart.fnType(dart.legacy(provider._CreateDeferredInheritedProviderElement$(dart.legacy(T), dart.legacy(R))), [])
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProvider, I[1]);
    dart.setFieldSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.BuildContext)]))),
      dispose: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.BuildContext), dart.legacy(T)])))
    }));
    return _CreateDeferredInheritedProvider;
  });
  provider._CreateDeferredInheritedProvider = provider._CreateDeferredInheritedProvider$();
  dart.addTypeTests(provider._CreateDeferredInheritedProvider, _is__CreateDeferredInheritedProvider_default);
  var _didBuild = dart.privateName(provider, "_didBuild");
  var _controller = dart.privateName(provider, "_controller");
  const _is__CreateDeferredInheritedProviderElement_default = Symbol('_is__CreateDeferredInheritedProviderElement_default');
  provider._CreateDeferredInheritedProviderElement$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var BuildContextLAndTLTovoid = () => (BuildContextLAndTLTovoid = dart.constFn(dart.fnType(dart.void, [T$.BuildContextL(), TL()])))();
    var BuildContextLAndTLToLvoid = () => (BuildContextLAndTLToLvoid = dart.constFn(dart.legacy(BuildContextLAndTLTovoid())))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    var DiagnosticsPropertyOfRL = () => (DiagnosticsPropertyOfRL = dart.constFn(diagnostics.DiagnosticsProperty$(RL())))();
    class _CreateDeferredInheritedProviderElement extends provider._DeferredDelegateState$(dart.legacy(T), dart.legacy(R), dart.legacy(provider._CreateDeferredInheritedProvider$(dart.legacy(T), dart.legacy(R)))) {
      get controller() {
        let t1, t0;
        if (!dart.test(this[_didBuild])) {
          if (!dart.test(this.debugSetInheritedLock(true))) dart.assertFailed(null, I[3], 186, 14, "debugSetInheritedLock(true)");
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.test(dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed(null, I[3], 190, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.test(dart.fn(() => {
              provider.debugIsInInheritedProviderCreate = true;
              provider.debugIsInInheritedProviderUpdate = false;
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[3], 199, 16, "() {\n          debugIsInInheritedProviderCreate = true;\n          debugIsInInheritedProviderUpdate = false;\n          return true;\n        }()");
            this[_controller] = (t0 = this.delegate, t1 = this.element, t0.create(t1));
          } finally {
            if (!dart.test(dart.fn(() => {
              provider.debugIsInInheritedProviderCreate = _debugPreviousIsInInheritedProviderCreate;
              provider.debugIsInInheritedProviderUpdate = _debugPreviousIsInInheritedProviderUpdate;
              return true;
            }, T$.VoidToboolL())())) dart.assertFailed(null, I[3], 206, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate;\n          return true;\n        }()");
          }
          this[_didBuild] = true;
        }
        return this[_controller];
      }
      dispose() {
        let t0;
        super.dispose();
        if (dart.test(this[_didBuild])) {
          t0 = BuildContextLAndTLToLvoid().as(this.delegate.dispose);
          t0 == null ? null : t0(this.element, this[_controller]);
        }
      }
      debugFillProperties(properties) {
        let t0, t0$;
        super.debugFillProperties(properties);
        if (dart.test(this.isLoaded)) {
          t0 = properties;
          (() => {
            t0.add(new (DiagnosticsPropertyOfTL()).new("controller", this.controller));
            t0.add(new (DiagnosticsPropertyOfRL()).new("value", this.value));
            return t0;
          })();
        } else {
          t0$ = properties;
          (() => {
            t0$.add(new diagnostics.FlagProperty.new("controller", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            t0$.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            return t0$;
          })();
        }
      }
    }
    (_CreateDeferredInheritedProviderElement.new = function() {
      this[_didBuild] = false;
      this[_controller] = null;
      _CreateDeferredInheritedProviderElement.__proto__.new.call(this);
      ;
    }).prototype = _CreateDeferredInheritedProviderElement.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProviderElement);
    _CreateDeferredInheritedProviderElement.prototype[_is__CreateDeferredInheritedProviderElement_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProviderElement);
    dart.setGetterSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getGetters(_CreateDeferredInheritedProviderElement.__proto__),
      controller: dart.legacy(T)
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProviderElement, I[1]);
    dart.setFieldSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProviderElement.__proto__),
      [_didBuild]: dart.fieldType(dart.legacy(core.bool)),
      [_controller]: dart.fieldType(dart.legacy(T))
    }));
    return _CreateDeferredInheritedProviderElement;
  });
  provider._CreateDeferredInheritedProviderElement = provider._CreateDeferredInheritedProviderElement$();
  dart.addTypeTests(provider._CreateDeferredInheritedProviderElement, _is__CreateDeferredInheritedProviderElement_default);
  const _is__ValueDeferredInheritedProvider_default = Symbol('_is__ValueDeferredInheritedProvider_default');
  provider._ValueDeferredInheritedProvider$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _ValueDeferredInheritedProviderStateOfTL$RL = () => (_ValueDeferredInheritedProviderStateOfTL$RL = dart.constFn(provider._ValueDeferredInheritedProviderState$(TL(), RL())))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class _ValueDeferredInheritedProvider extends provider._DeferredDelegate$(dart.legacy(T), dart.legacy(R)) {
      createState() {
        return new (_ValueDeferredInheritedProviderStateOfTL$RL()).new();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (DiagnosticsPropertyOfTL()).new("controller", this.value));
      }
    }
    (_ValueDeferredInheritedProvider.new = function(value, updateShouldNotify, startListening) {
      this.value = value;
      _ValueDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _ValueDeferredInheritedProvider.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProvider);
    _ValueDeferredInheritedProvider.prototype[_is__ValueDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProvider);
    dart.setMethodSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueDeferredInheritedProvider.__proto__),
      createState: dart.fnType(dart.legacy(provider._ValueDeferredInheritedProviderState$(dart.legacy(T), dart.legacy(R))), [])
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProvider, I[1]);
    dart.setFieldSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueDeferredInheritedProvider.__proto__),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    return _ValueDeferredInheritedProvider;
  });
  provider._ValueDeferredInheritedProvider = provider._ValueDeferredInheritedProvider$();
  dart.addTypeTests(provider._ValueDeferredInheritedProvider, _is__ValueDeferredInheritedProvider_default);
  const _is__ValueDeferredInheritedProviderState_default = Symbol('_is__ValueDeferredInheritedProviderState_default');
  provider._ValueDeferredInheritedProviderState$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _ValueDeferredInheritedProviderOfTL$RL = () => (_ValueDeferredInheritedProviderOfTL$RL = dart.constFn(provider._ValueDeferredInheritedProvider$(TL(), RL())))();
    var _ValueDeferredInheritedProviderLOfTL$RL = () => (_ValueDeferredInheritedProviderLOfTL$RL = dart.constFn(dart.legacy(_ValueDeferredInheritedProviderOfTL$RL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    var DiagnosticsPropertyOfRL = () => (DiagnosticsPropertyOfRL = dart.constFn(diagnostics.DiagnosticsProperty$(RL())))();
    class _ValueDeferredInheritedProviderState extends provider._DeferredDelegateState$(dart.legacy(T), dart.legacy(R), dart.legacy(provider._ValueDeferredInheritedProvider$(dart.legacy(T), dart.legacy(R)))) {
      willUpdateDelegate(oldDelegate) {
        _ValueDeferredInheritedProviderLOfTL$RL().as(oldDelegate);
        if (!dart.equals(this.delegate.value, oldDelegate.value)) {
          if (this[_removeListener] != null) {
            this[_removeListener]();
            this[_removeListener] = null;
          }
          return true;
        }
        return false;
      }
      get controller() {
        return this.delegate.value;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        if (this[_removeListener] != null) {
          properties.add(new (DiagnosticsPropertyOfRL()).new("value", this.value));
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
    }
    (_ValueDeferredInheritedProviderState.new = function() {
      _ValueDeferredInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueDeferredInheritedProviderState.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProviderState);
    _ValueDeferredInheritedProviderState.prototype[_is__ValueDeferredInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProviderState);
    dart.setGetterSignature(_ValueDeferredInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueDeferredInheritedProviderState.__proto__),
      controller: dart.legacy(T)
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProviderState, I[1]);
    return _ValueDeferredInheritedProviderState;
  });
  provider._ValueDeferredInheritedProviderState = provider._ValueDeferredInheritedProviderState$();
  dart.addTypeTests(provider._ValueDeferredInheritedProviderState, _is__ValueDeferredInheritedProviderState_default);
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  provider['SelectContext|select'] = function SelectContext$124select(T, R, $this, selector) {
    if (!!T$.SliverWithKeepAliveWidgetL().is($this.widget)) dart.assertFailed("    Tried to use context.select inside a SliverList/SliderGridView.\n\n    This is likely a mistake, as instead of rebuilding only the item that cares\n    about the selected value, this would rebuild the entire list/grid.\n\n    To fix, add a `Builder` or extract the content of `itemBuilder` in a separate widget:\n\n    ```dart\n    ListView.builder(\n      itemBuilder: (context, index) {\n        return Builder(builder: (context) {\n          final todo = context.select((TodoList list) => list[index]);\n          return Text(todo.name);\n        });\n      },\n    );\n    ```\n    ", I[2], 225, 12, "widget is! SliverWithKeepAliveWidget");
    if (!(T$.LayoutBuilderL().is($this.widget) || dart.test($this.debugDoingBuild))) dart.assertFailed("Tried to use `context.select` outside of the `build` method of a widget.\n\nAny usage other than inside the `build` method of a widget are not supported.\n", I[2], 244, 12, "widget is LayoutBuilder || debugDoingBuild");
    let inheritedElement = provider.Provider._inheritedElementOf(dart.legacy(T), $this);
    try {
      let value = inheritedElement.value;
      if (!dart.test(dart.fn(() => {
        provider._debugIsSelecting = true;
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 252, 14, "() {\n        _debugIsSelecting = true;\n        return true;\n      }()");
      let selected = selector(value);
      $this.dependOnInheritedElement(inheritedElement, {aspect: dart.fn(newValue => !dart.test((C[11] || CT.C11).equals(selector(newValue), selected)), dart.fnType(T$.boolL(), [dart.legacy(T)]))});
      return selected;
    } finally {
      if (!dart.test(dart.fn(() => {
        provider._debugIsSelecting = false;
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[2], 264, 14, "() {\n        _debugIsSelecting = false;\n        return true;\n      }()");
    }
  };
  provider['SelectContext|get#select'] = function SelectContext$124get$35select($this) {
    return dart.fn((T, R, selector) => provider['SelectContext|select'](dart.legacy(T), dart.legacy(R), $this, selector), T$.FnToRL());
  };
  provider['ReadContext|read'] = function ReadContext$124read(T, $this) {
    return provider.Provider.of(dart.legacy(T), $this, {listen: false});
  };
  provider['ReadContext|get#read'] = function ReadContext$124get$35read($this) {
    return dart.fn(T => provider['ReadContext|read'](dart.legacy(T), $this), T$.VoidToTL());
  };
  provider['WatchContext|watch'] = function WatchContext$124watch(T, $this) {
    return provider.Provider.of(dart.legacy(T), $this);
  };
  provider['WatchContext|get#watch'] = function WatchContext$124get$35watch($this) {
    return dart.fn(T => provider['WatchContext|watch'](dart.legacy(T), $this), T$.VoidToTL());
  };
  dart.defineLazy(provider, {
    /*provider._debugIsSelecting*/get _debugIsSelecting() {
      return false;
    },
    set _debugIsSelecting(_) {},
    /*provider.debugIsInInheritedProviderUpdate*/get debugIsInInheritedProviderUpdate() {
      return false;
    },
    set debugIsInInheritedProviderUpdate(_) {},
    /*provider.debugIsInInheritedProviderCreate*/get debugIsInInheritedProviderCreate() {
      return false;
    },
    set debugIsInInheritedProviderCreate(_) {}
  }, true);
  dart.trackLibraries("packages/provider/src/provider.dart", {
    "package:provider/src/provider.dart": provider
  }, {
    "package:provider/src/provider.dart": ["inherited_provider.dart", "deferred_inherited_provider.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["provider.dart","inherited_provider.dart","deferred_inherited_provider.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/provider/src/provider.dart.lib.js"}');
  // Exports:
  return {
    src__provider: provider
  };
}));

//# sourceMappingURL=provider.dart.lib.js.map
