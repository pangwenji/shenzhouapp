define(['dart_sdk', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/rendering/debug_overflow_indicator.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/change_notifier.dart'], (function load__packages__flutter__src__rendering__shifted_box_dart(dart_sdk, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__rendering__debug_overflow_indicator$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__change_notifier$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const debug = packages__flutter__src__rendering__layer$46dart.src__rendering__debug;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const debug_overflow_indicator = packages__flutter__src__rendering__debug_overflow_indicator$46dart.src__rendering__debug_overflow_indicator;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  var shifted_box = Object.create(dart.library);
  var $isFinite = dartx.isFinite;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, T.OffsetN()])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (T.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(edge_insets.EdgeInsetsGeometry)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    DiagnosticsPropertyOfAlignmentGeometry: () => (T.DiagnosticsPropertyOfAlignmentGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(alignment.AlignmentGeometry)))(),
    BoxConstraintsToBoxConstraints: () => (T.BoxConstraintsToBoxConstraints = dart.constFn(dart.fnType(box.BoxConstraints, [box.BoxConstraints])))(),
    EnumPropertyOfTextBaseline: () => (T.EnumPropertyOfTextBaseline = dart.constFn(diagnostics.EnumProperty$(ui.TextBaseline)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967040.0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 2425393296.0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: box.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C5() {
      return C[5] = dart.fn(shifted_box.RenderUnconstrainedBox._unconstrained, T.BoxConstraintsToBoxConstraints());
    },
    get C6() {
      return C[6] = dart.fn(shifted_box.RenderUnconstrainedBox._widthConstrained, T.BoxConstraintsToBoxConstraints());
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.horizontal",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.fn(shifted_box.RenderUnconstrainedBox._heightConstrained, T.BoxConstraintsToBoxConstraints());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.vertical",
        index: 1
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "file:///D:/flutter/packages/flutter/lib/src/rendering/shifted_box.dart",
    "package:flutter/src/rendering/shifted_box.dart"
  ];
  const RenderBox_RenderObjectWithChildMixin$36 = class RenderBox_RenderObjectWithChildMixin extends box.RenderBox {};
  (RenderBox_RenderObjectWithChildMixin$36.new = function() {
    object.RenderObjectWithChildMixin$(box.RenderBox)[dart.mixinNew].call(this);
    RenderBox_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderObjectWithChildMixin$36, object.RenderObjectWithChildMixin$(box.RenderBox));
  shifted_box.RenderShiftedBox = class RenderShiftedBox extends RenderBox_RenderObjectWithChildMixin$36 {
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 33, 42, "height");
      if (this.child != null) return dart.nullCheck(this.child).getMinIntrinsicWidth(height);
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 40, 42, "height");
      if (this.child != null) return dart.nullCheck(this.child).getMaxIntrinsicWidth(height);
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 47, 43, "width");
      if (this.child != null) return dart.nullCheck(this.child).getMinIntrinsicHeight(width);
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 54, 43, "width");
      if (this.child != null) return dart.nullCheck(this.child).getMaxIntrinsicHeight(width);
      return 0.0;
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[0], 61, 56, "baseline");
      let result = null;
      if (this.child != null) {
        if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, I[0], 64, 14, "!debugNeedsLayout");
        result = dart.nullCheck(this.child).getDistanceToActualBaseline(baseline);
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        if (result != null) result = dart.notNull(result) + dart.notNull(childParentData.offset.dy);
      } else {
        result = super.computeDistanceToActualBaseline(baseline);
      }
      return result;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 76, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 76, 46, "offset");
      if (this.child != null) {
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        context.paintChild(dart.nullCheck(this.child), childParentData.offset['+'](offset));
      }
    }
    hitTestChildren(result, opts) {
      if (result == null) dart.nullFailed(I[0], 84, 41, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[0], 84, 67, "position");
      if (this.child != null) {
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        return result.addWithPaintOffset({offset: childParentData.offset, position: position, hitTest: dart.fn((result, transformed) => {
            if (result == null) dart.nullFailed(I[0], 90, 36, "result");
            if (!dart.equals(transformed, position['-'](childParentData.offset))) dart.assertFailed(null, I[0], 91, 18, "transformed == position - childParentData.offset");
            return dart.nullCheck(this.child).hitTest(result, {position: dart.nullCheck(transformed)});
          }, T.BoxHitTestResultAndOffsetNTobool())});
      }
      return false;
    }
  };
  (shifted_box.RenderShiftedBox.new = function(child) {
    shifted_box.RenderShiftedBox.__proto__.new.call(this);
    this.child = child;
  }).prototype = shifted_box.RenderShiftedBox.prototype;
  dart.addTypeTests(shifted_box.RenderShiftedBox);
  dart.addTypeCaches(shifted_box.RenderShiftedBox);
  dart.setLibraryUri(shifted_box.RenderShiftedBox, I[1]);
  var _resolvedPadding = dart.privateName(shifted_box, "_resolvedPadding");
  var _textDirection = dart.privateName(shifted_box, "_textDirection");
  var _padding = dart.privateName(shifted_box, "_padding");
  var _resolve = dart.privateName(shifted_box, "_resolve");
  var _markNeedResolution = dart.privateName(shifted_box, "_markNeedResolution");
  shifted_box.RenderPadding = class RenderPadding extends shifted_box.RenderShiftedBox {
    [_resolve]() {
      if (this[_resolvedPadding] != null) return;
      this[_resolvedPadding] = this.padding.resolve(this.textDirection);
      if (!dart.test(dart.nullCheck(this[_resolvedPadding]).isNonNegative)) dart.assertFailed(null, I[0], 126, 12, "_resolvedPadding!.isNonNegative");
    }
    [_markNeedResolution]() {
      this[_resolvedPadding] = null;
      this.markNeedsLayout();
    }
    get padding() {
      return this[_padding];
    }
    set padding(value) {
      if (value == null) dart.nullFailed(I[0], 140, 34, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 141, 12, "value != null");
      if (!dart.test(value.isNonNegative)) dart.assertFailed(null, I[0], 142, 12, "value.isNonNegative");
      if (dart.equals(this[_padding], value)) return;
      this[_padding] = value;
      this[_markNeedResolution]();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) return;
      this[_textDirection] = value;
      this[_markNeedResolution]();
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 163, 42, "height");
      this[_resolve]();
      let totalHorizontalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right);
      let totalVerticalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom);
      if (this.child != null) return dart.notNull(dart.nullCheck(this.child).getMinIntrinsicWidth(math.max(core.double, 0.0, dart.notNull(height) - totalVerticalPadding))) + totalHorizontalPadding;
      return totalHorizontalPadding;
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 173, 42, "height");
      this[_resolve]();
      let totalHorizontalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right);
      let totalVerticalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom);
      if (this.child != null) return dart.notNull(dart.nullCheck(this.child).getMaxIntrinsicWidth(math.max(core.double, 0.0, dart.notNull(height) - totalVerticalPadding))) + totalHorizontalPadding;
      return totalHorizontalPadding;
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 183, 43, "width");
      this[_resolve]();
      let totalHorizontalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right);
      let totalVerticalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom);
      if (this.child != null) return dart.notNull(dart.nullCheck(this.child).getMinIntrinsicHeight(math.max(core.double, 0.0, dart.notNull(width) - totalHorizontalPadding))) + totalVerticalPadding;
      return totalVerticalPadding;
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 193, 43, "width");
      this[_resolve]();
      let totalHorizontalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right);
      let totalVerticalPadding = dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom);
      if (this.child != null) return dart.notNull(dart.nullCheck(this.child).getMaxIntrinsicHeight(math.max(core.double, 0.0, dart.notNull(width) - totalHorizontalPadding))) + totalVerticalPadding;
      return totalVerticalPadding;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 203, 40, "constraints");
      this[_resolve]();
      if (!(this[_resolvedPadding] != null)) dart.assertFailed(null, I[0], 205, 12, "_resolvedPadding != null");
      if (this.child == null) {
        return constraints.constrain(new ui.Size.new(dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right), dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom)));
      }
      let innerConstraints = constraints.deflate(dart.nullCheck(this[_resolvedPadding]));
      let childSize = dart.nullCheck(this.child).getDryLayout(innerConstraints);
      return constraints.constrain(new ui.Size.new(dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(childSize.width) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right), dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(childSize.height) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom)));
    }
    performLayout() {
      let constraints = this.constraints;
      this[_resolve]();
      if (!(this[_resolvedPadding] != null)) dart.assertFailed(null, I[0], 224, 12, "_resolvedPadding != null");
      if (this.child == null) {
        this.size = constraints.constrain(new ui.Size.new(dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right), dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom)));
        return;
      }
      let innerConstraints = constraints.deflate(dart.nullCheck(this[_resolvedPadding]));
      dart.nullCheck(this.child).layout(innerConstraints, {parentUsesSize: true});
      let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
      childParentData.offset = new ui.Offset.new(dart.nullCheck(this[_resolvedPadding]).left, dart.nullCheck(this[_resolvedPadding]).top);
      this.size = constraints.constrain(new ui.Size.new(dart.notNull(dart.nullCheck(this[_resolvedPadding]).left) + dart.notNull(dart.nullCheck(this.child).size.width) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).right), dart.notNull(dart.nullCheck(this[_resolvedPadding]).top) + dart.notNull(dart.nullCheck(this.child).size.height) + dart.notNull(dart.nullCheck(this[_resolvedPadding]).bottom)));
    }
    debugPaintSize(context, offset) {
      if (context == null) dart.nullFailed(I[0], 243, 39, "context");
      if (offset == null) dart.nullFailed(I[0], 243, 55, "offset");
      super.debugPaintSize(context, offset);
      if (!dart.test(dart.fn(() => {
        let outerRect = offset['&'](this.size);
        debug.debugPaintPadding(context.canvas, outerRect, this.child != null ? dart.nullCheck(this[_resolvedPadding]).deflateRect(outerRect) : null);
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 245, 12, "() {\r\n      final Rect outerRect = offset & size;\r\n      debugPaintPadding(context.canvas, outerRect, child != null ? _resolvedPadding!.deflateRect(outerRect) : null);\r\n      return true;\r\n    }()");
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 253, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfEdgeInsetsGeometry()).new("padding", this.padding));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (shifted_box.RenderPadding.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : null;
    if (padding == null) dart.nullFailed(I[0], 111, 33, "padding");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_resolvedPadding] = null;
    if (!(padding != null)) dart.assertFailed(null, I[0], 114, 15, "padding != null");
    if (!dart.test(padding.isNonNegative)) dart.assertFailed(null, I[0], 115, 15, "padding.isNonNegative");
    this[_textDirection] = textDirection;
    this[_padding] = padding;
    shifted_box.RenderPadding.__proto__.new.call(this, child);
    ;
  }).prototype = shifted_box.RenderPadding.prototype;
  dart.addTypeTests(shifted_box.RenderPadding);
  dart.addTypeCaches(shifted_box.RenderPadding);
  dart.setMethodSignature(shifted_box.RenderPadding, () => ({
    __proto__: dart.getMethods(shifted_box.RenderPadding.__proto__),
    [_resolve]: dart.fnType(dart.void, []),
    [_markNeedResolution]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(shifted_box.RenderPadding, () => ({
    __proto__: dart.getGetters(shifted_box.RenderPadding.__proto__),
    padding: edge_insets.EdgeInsetsGeometry,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setSetterSignature(shifted_box.RenderPadding, () => ({
    __proto__: dart.getSetters(shifted_box.RenderPadding.__proto__),
    padding: edge_insets.EdgeInsetsGeometry,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setLibraryUri(shifted_box.RenderPadding, I[1]);
  dart.setFieldSignature(shifted_box.RenderPadding, () => ({
    __proto__: dart.getFields(shifted_box.RenderPadding.__proto__),
    [_resolvedPadding]: dart.fieldType(dart.nullable(edge_insets.EdgeInsets)),
    [_padding]: dart.fieldType(edge_insets.EdgeInsetsGeometry),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection))
  }));
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _resolvedAlignment = dart.privateName(shifted_box, "_resolvedAlignment");
  var _alignment = dart.privateName(shifted_box, "_alignment");
  shifted_box.RenderAligningShiftedBox = class RenderAligningShiftedBox extends shifted_box.RenderShiftedBox {
    [_resolve]() {
      if (this[_resolvedAlignment] != null) return;
      this[_resolvedAlignment] = this.alignment.resolve(this.textDirection);
    }
    [_markNeedResolution]() {
      this[_resolvedAlignment] = null;
      this.markNeedsLayout();
    }
    get alignment() {
      return this[_alignment];
    }
    set alignment(value) {
      if (value == null) dart.nullFailed(I[0], 314, 35, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 315, 12, "value != null");
      if (dart.equals(this[_alignment], value)) return;
      this[_alignment] = value;
      this[_markNeedResolution]();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) return;
      this[_textDirection] = value;
      this[_markNeedResolution]();
    }
    alignChild() {
      this[_resolve]();
      if (!(this.child != null)) dart.assertFailed(null, I[0], 346, 12, "child != null");
      if (!!dart.test(dart.nullCheck(this.child).debugNeedsLayout)) dart.assertFailed(null, I[0], 347, 12, "!child!.debugNeedsLayout");
      if (!dart.test(dart.nullCheck(this.child).hasSize)) dart.assertFailed(null, I[0], 348, 12, "child!.hasSize");
      if (!dart.test(this.hasSize)) dart.assertFailed(null, I[0], 349, 12, "hasSize");
      if (!(this[_resolvedAlignment] != null)) dart.assertFailed(null, I[0], 350, 12, "_resolvedAlignment != null");
      let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
      childParentData.offset = dart.nullCheck(this[_resolvedAlignment]).alongOffset(ui.Offset.as(this.size['-'](dart.nullCheck(this.child).size)));
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 356, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfAlignmentGeometry()).new("alignment", this.alignment));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
    }
  };
  (shifted_box.RenderAligningShiftedBox.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 270, 23, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_resolvedAlignment] = null;
    if (!(alignment != null)) dart.assertFailed(null, I[0], 273, 15, "alignment != null");
    this[_alignment] = alignment;
    this[_textDirection] = textDirection;
    shifted_box.RenderAligningShiftedBox.__proto__.new.call(this, child);
    ;
  }).prototype = shifted_box.RenderAligningShiftedBox.prototype;
  (shifted_box.RenderAligningShiftedBox.mixin = function(alignment, textDirection, child) {
    if (alignment == null) dart.nullFailed(I[0], 281, 52, "alignment");
    shifted_box.RenderAligningShiftedBox.new.call(this, {alignment: alignment, textDirection: textDirection, child: child});
  }).prototype = shifted_box.RenderAligningShiftedBox.prototype;
  dart.addTypeTests(shifted_box.RenderAligningShiftedBox);
  dart.addTypeCaches(shifted_box.RenderAligningShiftedBox);
  dart.setMethodSignature(shifted_box.RenderAligningShiftedBox, () => ({
    __proto__: dart.getMethods(shifted_box.RenderAligningShiftedBox.__proto__),
    [_resolve]: dart.fnType(dart.void, []),
    [_markNeedResolution]: dart.fnType(dart.void, []),
    alignChild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(shifted_box.RenderAligningShiftedBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderAligningShiftedBox.__proto__),
    alignment: alignment.AlignmentGeometry,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setSetterSignature(shifted_box.RenderAligningShiftedBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderAligningShiftedBox.__proto__),
    alignment: alignment.AlignmentGeometry,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setLibraryUri(shifted_box.RenderAligningShiftedBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderAligningShiftedBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderAligningShiftedBox.__proto__),
    [_resolvedAlignment]: dart.fieldType(dart.nullable(alignment.Alignment)),
    [_alignment]: dart.fieldType(alignment.AlignmentGeometry),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection))
  }));
  var _widthFactor = dart.privateName(shifted_box, "_widthFactor");
  var _heightFactor = dart.privateName(shifted_box, "_heightFactor");
  var Color_value = dart.privateName(ui, "Color.value");
  shifted_box.RenderPositionedBox = class RenderPositionedBox extends shifted_box.RenderAligningShiftedBox {
    get widthFactor() {
      return this[_widthFactor];
    }
    set widthFactor(value) {
      if (!(value == null || dart.notNull(value) >= 0.0)) dart.assertFailed(null, I[0], 393, 12, "value == null || value >= 0.0");
      if (this[_widthFactor] == value) return;
      this[_widthFactor] = value;
      this.markNeedsLayout();
    }
    get heightFactor() {
      return this[_heightFactor];
    }
    set heightFactor(value) {
      if (!(value == null || dart.notNull(value) >= 0.0)) dart.assertFailed(null, I[0], 406, 12, "value == null || value >= 0.0");
      if (this[_heightFactor] == value) return;
      this[_heightFactor] = value;
      this.markNeedsLayout();
    }
    computeDryLayout(constraints) {
      let t0, t0$;
      if (constraints == null) dart.nullFailed(I[0], 414, 40, "constraints");
      let shrinkWrapWidth = this[_widthFactor] != null || constraints.maxWidth === 1 / 0;
      let shrinkWrapHeight = this[_heightFactor] != null || constraints.maxHeight === 1 / 0;
      if (this.child != null) {
        let childSize = dart.nullCheck(this.child).getDryLayout(constraints.loosen());
        return constraints.constrain(new ui.Size.new(shrinkWrapWidth ? dart.notNull(childSize.width) * dart.notNull((t0 = this[_widthFactor], t0 == null ? 1.0 : t0)) : 1 / 0, shrinkWrapHeight ? dart.notNull(childSize.height) * dart.notNull((t0$ = this[_heightFactor], t0$ == null ? 1.0 : t0$)) : 1 / 0));
      }
      return constraints.constrain(new ui.Size.new(shrinkWrapWidth ? 0.0 : 1 / 0, shrinkWrapHeight ? 0.0 : 1 / 0));
    }
    performLayout() {
      let t0, t0$;
      let constraints = this.constraints;
      let shrinkWrapWidth = this[_widthFactor] != null || constraints.maxWidth === 1 / 0;
      let shrinkWrapHeight = this[_heightFactor] != null || constraints.maxHeight === 1 / 0;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(constraints.loosen(), {parentUsesSize: true});
        this.size = constraints.constrain(new ui.Size.new(shrinkWrapWidth ? dart.notNull(dart.nullCheck(this.child).size.width) * dart.notNull((t0 = this[_widthFactor], t0 == null ? 1.0 : t0)) : 1 / 0, shrinkWrapHeight ? dart.notNull(dart.nullCheck(this.child).size.height) * dart.notNull((t0$ = this[_heightFactor], t0$ == null ? 1.0 : t0$)) : 1 / 0));
        this.alignChild();
      } else {
        this.size = constraints.constrain(new ui.Size.new(shrinkWrapWidth ? 0.0 : 1 / 0, shrinkWrapHeight ? 0.0 : 1 / 0));
      }
    }
    debugPaintSize(context, offset) {
      if (context == null) dart.nullFailed(I[0], 452, 39, "context");
      if (offset == null) dart.nullFailed(I[0], 452, 55, "offset");
      super.debugPaintSize(context, offset);
      if (!dart.test(dart.fn(() => {
        let t0, t0$, t0$0, t0$1;
        let paint = null;
        if (this.child != null && !dart.test(dart.nullCheck(this.child).size.isEmpty)) {
          let path = null;
          paint = (t0 = ui.Paint.new(), (() => {
            t0.style = ui.PaintingStyle.stroke;
            t0.strokeWidth = 1.0;
            t0.color = C[1] || CT.C1;
            return t0;
          })());
          path = ui.Path.new();
          let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
          if (dart.notNull(childParentData.offset.dy) > 0.0) {
            let headSize = math.min(core.double, dart.notNull(childParentData.offset.dy) * 0.2, 10.0);
            t0$ = path;
            (() => {
              t0$.moveTo(dart.notNull(offset.dx) + dart.notNull(this.size.width) / 2.0, offset.dy);
              t0$.relativeLineTo(0.0, dart.notNull(childParentData.offset.dy) - headSize);
              t0$.relativeLineTo(headSize, 0.0);
              t0$.relativeLineTo(-headSize, headSize);
              t0$.relativeLineTo(-headSize, -headSize);
              t0$.relativeLineTo(headSize, 0.0);
              t0$.moveTo(dart.notNull(offset.dx) + dart.notNull(this.size.width) / 2.0, dart.notNull(offset.dy) + dart.notNull(this.size.height));
              t0$.relativeLineTo(0.0, -dart.notNull(childParentData.offset.dy) + headSize);
              t0$.relativeLineTo(headSize, 0.0);
              t0$.relativeLineTo(-headSize, -headSize);
              t0$.relativeLineTo(-headSize, headSize);
              t0$.relativeLineTo(headSize, 0.0);
              return t0$;
            })();
            context.canvas.drawPath(path, paint);
          }
          if (dart.notNull(childParentData.offset.dx) > 0.0) {
            let headSize = math.min(core.double, dart.notNull(childParentData.offset.dx) * 0.2, 10.0);
            t0$0 = path;
            (() => {
              t0$0.moveTo(offset.dx, dart.notNull(offset.dy) + dart.notNull(this.size.height) / 2.0);
              t0$0.relativeLineTo(dart.notNull(childParentData.offset.dx) - headSize, 0.0);
              t0$0.relativeLineTo(0.0, headSize);
              t0$0.relativeLineTo(headSize, -headSize);
              t0$0.relativeLineTo(-headSize, -headSize);
              t0$0.relativeLineTo(0.0, headSize);
              t0$0.moveTo(dart.notNull(offset.dx) + dart.notNull(this.size.width), dart.notNull(offset.dy) + dart.notNull(this.size.height) / 2.0);
              t0$0.relativeLineTo(-dart.notNull(childParentData.offset.dx) + headSize, 0.0);
              t0$0.relativeLineTo(0.0, headSize);
              t0$0.relativeLineTo(-headSize, -headSize);
              t0$0.relativeLineTo(headSize, -headSize);
              t0$0.relativeLineTo(0.0, headSize);
              return t0$0;
            })();
            context.canvas.drawPath(path, paint);
          }
        } else {
          paint = (t0$1 = ui.Paint.new(), (() => {
            t0$1.color = C[2] || CT.C2;
            return t0$1;
          })());
          context.canvas.drawRect(offset['&'](this.size), paint);
        }
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 454, 12, "() {\r\n      final Paint paint;\r\n      if (child != null && !child!.size.isEmpty) {\r\n        final Path path;\r\n        paint = Paint()\r\n          ..style = PaintingStyle.stroke\r\n          ..strokeWidth = 1.0\r\n          ..color = const Color(0xFFFFFF00);\r\n        path = Path();\r\n        final BoxParentData childParentData = child!.parentData! as BoxParentData;\r\n        if (childParentData.offset.dy > 0.0) {\r\n          // vertical alignment arrows\r\n          final double headSize = math.min(childParentData.offset.dy * 0.2, 10.0);\r\n          path\r\n            ..moveTo(offset.dx + size.width / 2.0, offset.dy)\r\n            ..relativeLineTo(0.0, childParentData.offset.dy - headSize)\r\n            ..relativeLineTo(headSize, 0.0)\r\n            ..relativeLineTo(-headSize, headSize)\r\n            ..relativeLineTo(-headSize, -headSize)\r\n            ..relativeLineTo(headSize, 0.0)\r\n            ..moveTo(offset.dx + size.width / 2.0, offset.dy + size.height)\r\n            ..relativeLineTo(0.0, -childParentData.offset.dy + headSize)\r\n            ..relativeLineTo(headSize, 0.0)\r\n            ..relativeLineTo(-headSize, -headSize)\r\n            ..relativeLineTo(-headSize, headSize)\r\n            ..relativeLineTo(headSize, 0.0);\r\n          context.canvas.drawPath(path, paint);\r\n        }\r\n        if (childParentData.offset.dx > 0.0) {\r\n          // horizontal alignment arrows\r\n          final double headSize = math.min(childParentData.offset.dx * 0.2, 10.0);\r\n          path\r\n            ..moveTo(offset.dx, offset.dy + size.height / 2.0)\r\n            ..relativeLineTo(childParentData.offset.dx - headSize, 0.0)\r\n            ..relativeLineTo(0.0, headSize)\r\n            ..relativeLineTo(headSize, -headSize)\r\n            ..relativeLineTo(-headSize, -headSize)\r\n            ..relativeLineTo(0.0, headSize)\r\n            ..moveTo(offset.dx + size.width, offset.dy + size.height / 2.0)\r\n            ..relativeLineTo(-childParentData.offset.dx + headSize, 0.0)\r\n            ..relativeLineTo(0.0, headSize)\r\n            ..relativeLineTo(-headSize, -headSize)\r\n            ..relativeLineTo(headSize, -headSize)\r\n            ..relativeLineTo(0.0, headSize);\r\n          context.canvas.drawPath(path, paint);\r\n        }\r\n      } else {\r\n        paint = Paint()\r\n          ..color = const Color(0x90909090);\r\n        context.canvas.drawRect(offset & size, paint);\r\n      }\r\n      return true;\r\n    }()");
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 510, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("widthFactor", this[_widthFactor], {ifNull: "expand"}));
      properties.add(new diagnostics.DoubleProperty.new("heightFactor", this[_heightFactor], {ifNull: "expand"}));
    }
  };
  (shifted_box.RenderPositionedBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 379, 23, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (!(widthFactor == null || dart.notNull(widthFactor) >= 0.0)) dart.assertFailed(null, I[0], 381, 15, "widthFactor == null || widthFactor >= 0.0");
    if (!(heightFactor == null || dart.notNull(heightFactor) >= 0.0)) dart.assertFailed(null, I[0], 382, 15, "heightFactor == null || heightFactor >= 0.0");
    this[_widthFactor] = widthFactor;
    this[_heightFactor] = heightFactor;
    shifted_box.RenderPositionedBox.__proto__.new.call(this, {child: child, alignment: alignment, textDirection: textDirection});
    ;
  }).prototype = shifted_box.RenderPositionedBox.prototype;
  dart.addTypeTests(shifted_box.RenderPositionedBox);
  dart.addTypeCaches(shifted_box.RenderPositionedBox);
  dart.setGetterSignature(shifted_box.RenderPositionedBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderPositionedBox.__proto__),
    widthFactor: dart.nullable(core.double),
    heightFactor: dart.nullable(core.double)
  }));
  dart.setSetterSignature(shifted_box.RenderPositionedBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderPositionedBox.__proto__),
    widthFactor: dart.nullable(core.double),
    heightFactor: dart.nullable(core.double)
  }));
  dart.setLibraryUri(shifted_box.RenderPositionedBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderPositionedBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderPositionedBox.__proto__),
    [_widthFactor]: dart.fieldType(dart.nullable(core.double)),
    [_heightFactor]: dart.fieldType(dart.nullable(core.double))
  }));
  var _minWidth = dart.privateName(shifted_box, "_minWidth");
  var _maxWidth = dart.privateName(shifted_box, "_maxWidth");
  var _minHeight = dart.privateName(shifted_box, "_minHeight");
  var _maxHeight = dart.privateName(shifted_box, "_maxHeight");
  var _getInnerConstraints = dart.privateName(shifted_box, "_getInnerConstraints");
  shifted_box.RenderConstrainedOverflowBox = class RenderConstrainedOverflowBox extends shifted_box.RenderAligningShiftedBox {
    get minWidth() {
      return this[_minWidth];
    }
    set minWidth(value) {
      if (this[_minWidth] == value) return;
      this[_minWidth] = value;
      this.markNeedsLayout();
    }
    get maxWidth() {
      return this[_maxWidth];
    }
    set maxWidth(value) {
      if (this[_maxWidth] == value) return;
      this[_maxWidth] = value;
      this.markNeedsLayout();
    }
    get minHeight() {
      return this[_minHeight];
    }
    set minHeight(value) {
      if (this[_minHeight] == value) return;
      this[_minHeight] = value;
      this.markNeedsLayout();
    }
    get maxHeight() {
      return this[_maxHeight];
    }
    set maxHeight(value) {
      if (this[_maxHeight] == value) return;
      this[_maxHeight] = value;
      this.markNeedsLayout();
    }
    [_getInnerConstraints](constraints) {
      let t0, t0$, t0$0, t0$1;
      if (constraints == null) dart.nullFailed(I[0], 607, 54, "constraints");
      return new box.BoxConstraints.new({minWidth: (t0 = this[_minWidth], t0 == null ? constraints.minWidth : t0), maxWidth: (t0$ = this[_maxWidth], t0$ == null ? constraints.maxWidth : t0$), minHeight: (t0$0 = this[_minHeight], t0$0 == null ? constraints.minHeight : t0$0), maxHeight: (t0$1 = this[_maxHeight], t0$1 == null ? constraints.maxHeight : t0$1)});
    }
    get sizedByParent() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 620, 40, "constraints");
      return constraints.biggest;
    }
    performLayout() {
      let t0;
      if (this.child != null) {
        t0 = this.child;
        t0 == null ? null : t0.layout(this[_getInnerConstraints](this.constraints), {parentUsesSize: true});
        this.alignChild();
      }
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 633, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("minWidth", this.minWidth, {ifNull: "use parent minWidth constraint"}));
      properties.add(new diagnostics.DoubleProperty.new("maxWidth", this.maxWidth, {ifNull: "use parent maxWidth constraint"}));
      properties.add(new diagnostics.DoubleProperty.new("minHeight", this.minHeight, {ifNull: "use parent minHeight constraint"}));
      properties.add(new diagnostics.DoubleProperty.new("maxHeight", this.maxHeight, {ifNull: "use parent maxHeight constraint"}));
    }
  };
  (shifted_box.RenderConstrainedOverflowBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 555, 23, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_minWidth] = minWidth;
    this[_maxWidth] = maxWidth;
    this[_minHeight] = minHeight;
    this[_maxHeight] = maxHeight;
    shifted_box.RenderConstrainedOverflowBox.__proto__.new.call(this, {child: child, alignment: alignment, textDirection: textDirection});
    ;
  }).prototype = shifted_box.RenderConstrainedOverflowBox.prototype;
  dart.addTypeTests(shifted_box.RenderConstrainedOverflowBox);
  dart.addTypeCaches(shifted_box.RenderConstrainedOverflowBox);
  dart.setMethodSignature(shifted_box.RenderConstrainedOverflowBox, () => ({
    __proto__: dart.getMethods(shifted_box.RenderConstrainedOverflowBox.__proto__),
    [_getInnerConstraints]: dart.fnType(box.BoxConstraints, [box.BoxConstraints])
  }));
  dart.setGetterSignature(shifted_box.RenderConstrainedOverflowBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderConstrainedOverflowBox.__proto__),
    minWidth: dart.nullable(core.double),
    maxWidth: dart.nullable(core.double),
    minHeight: dart.nullable(core.double),
    maxHeight: dart.nullable(core.double)
  }));
  dart.setSetterSignature(shifted_box.RenderConstrainedOverflowBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderConstrainedOverflowBox.__proto__),
    minWidth: dart.nullable(core.double),
    maxWidth: dart.nullable(core.double),
    minHeight: dart.nullable(core.double),
    maxHeight: dart.nullable(core.double)
  }));
  dart.setLibraryUri(shifted_box.RenderConstrainedOverflowBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderConstrainedOverflowBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderConstrainedOverflowBox.__proto__),
    [_minWidth]: dart.fieldType(dart.nullable(core.double)),
    [_maxWidth]: dart.fieldType(dart.nullable(core.double)),
    [_minHeight]: dart.fieldType(dart.nullable(core.double)),
    [_maxHeight]: dart.fieldType(dart.nullable(core.double))
  }));
  var _name = dart.privateName(ui, "_name");
  var _overflowContainerRect = dart.privateName(shifted_box, "_overflowContainerRect");
  var _overflowChildRect = dart.privateName(shifted_box, "_overflowChildRect");
  var _isOverflowing = dart.privateName(shifted_box, "_isOverflowing");
  var _childConstraints = dart.privateName(shifted_box, "_childConstraints");
  var _clipRectLayer = dart.privateName(shifted_box, "_clipRectLayer");
  var _constraintsTransform = dart.privateName(shifted_box, "_constraintsTransform");
  var _clipBehavior = dart.privateName(shifted_box, "_clipBehavior");
  const RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36 = class RenderAligningShiftedBox_DebugOverflowIndicatorMixin extends shifted_box.RenderAligningShiftedBox {};
  (RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.new = function(opts) {
    debug_overflow_indicator.DebugOverflowIndicatorMixin[dart.mixinNew].call(this);
    RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.__proto__.new.call(this, opts);
  }).prototype = RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.prototype;
  (RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.mixin = function(alignment, textDirection, child) {
    debug_overflow_indicator.DebugOverflowIndicatorMixin[dart.mixinNew].call(this);
    RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.__proto__.mixin.call(this, alignment, textDirection, child);
  }).prototype = RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36.prototype;
  dart.applyMixin(RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36, debug_overflow_indicator.DebugOverflowIndicatorMixin);
  shifted_box.RenderConstraintsTransformBox = class RenderConstraintsTransformBox extends RenderAligningShiftedBox_DebugOverflowIndicatorMixin$36 {
    get constraintsTransform() {
      return this[_constraintsTransform];
    }
    set constraintsTransform(value) {
      if (value == null) dart.nullFailed(I[0], 701, 52, "value");
      if (dart.equals(this[_constraintsTransform], value)) return;
      this[_constraintsTransform] = value;
      let needsLayout = this[_childConstraints] == null || !dart.equals(this[_childConstraints], value(this.constraints));
      if (needsLayout) this.markNeedsLayout();
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (value == null) dart.nullFailed(I[0], 719, 25, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 720, 12, "value != null");
      if (value != this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    computeMinIntrinsicHeight(width) {
      let t0;
      if (width == null) dart.nullFailed(I[0], 729, 43, "width");
      return super.computeMinIntrinsicHeight((t0 = new box.BoxConstraints.new({maxWidth: width}), this.constraintsTransform(t0)).maxWidth);
    }
    computeMaxIntrinsicHeight(width) {
      let t0;
      if (width == null) dart.nullFailed(I[0], 736, 43, "width");
      return super.computeMaxIntrinsicHeight((t0 = new box.BoxConstraints.new({maxWidth: width}), this.constraintsTransform(t0)).maxWidth);
    }
    computeMinIntrinsicWidth(height) {
      let t0;
      if (height == null) dart.nullFailed(I[0], 743, 42, "height");
      return super.computeMinIntrinsicWidth((t0 = new box.BoxConstraints.new({maxHeight: height}), this.constraintsTransform(t0)).maxHeight);
    }
    computeMaxIntrinsicWidth(height) {
      let t0;
      if (height == null) dart.nullFailed(I[0], 750, 42, "height");
      return super.computeMaxIntrinsicWidth((t0 = new box.BoxConstraints.new({maxHeight: height}), this.constraintsTransform(t0)).maxHeight);
    }
    computeDryLayout(constraints) {
      let t1, t0;
      if (constraints == null) dart.nullFailed(I[0], 757, 40, "constraints");
      let childSize = (t0 = this.child, t0 == null ? null : t0.getDryLayout((t1 = constraints, this.constraintsTransform(t1))));
      return childSize == null ? constraints.smallest : constraints.constrain(childSize);
    }
    performLayout() {
      let t0;
      let constraints = this.constraints;
      let child = this.child;
      if (child != null) {
        let childConstraints = (t0 = constraints, this.constraintsTransform(t0));
        if (!(childConstraints != null)) dart.assertFailed(null, I[0], 774, 14, "childConstraints != null");
        if (!dart.test(childConstraints.isNormalized)) dart.assertFailed(dart.str(childConstraints) + " is not normalized", I[0], 775, 14, "childConstraints.isNormalized");
        this[_childConstraints] = childConstraints;
        child.layout(childConstraints, {parentUsesSize: true});
        this.size = constraints.constrain(child.size);
        this.alignChild();
        let childParentData = box.BoxParentData.as(dart.nullCheck(child.parentData));
        this[_overflowContainerRect] = ui.Offset.zero['&'](this.size);
        this[_overflowChildRect] = childParentData.offset['&'](child.size);
      } else {
        this.size = constraints.smallest;
        this[_overflowContainerRect] = ui.Rect.zero;
        this[_overflowChildRect] = ui.Rect.zero;
      }
      this[_isOverflowing] = stack.RelativeRect.fromRect(this[_overflowContainerRect], this[_overflowChildRect]).hasInsets;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 792, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 792, 46, "offset");
      if (this.child == null || dart.test(this.size.isEmpty)) return;
      if (!dart.test(this[_isOverflowing])) {
        super.paint(context, offset);
        return;
      }
      if (this.clipBehavior == ui.Clip.none) {
        this[_clipRectLayer] = null;
        super.paint(context, offset);
      } else {
        this[_clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, 'paint', super.paint), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer]});
      }
      if (!dart.test(dart.fn(() => {
        this.paintOverflowIndicator(context, offset, this[_overflowContainerRect], this[_overflowChildRect]);
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[0], 819, 12, "() {\r\n      paintOverflowIndicator(context, offset, _overflowContainerRect, _overflowChildRect);\r\n      return true;\r\n    }()");
    }
    describeApproximatePaintClip(child) {
      object.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[0], 828, 51, "child");
      return dart.test(this[_isOverflowing]) ? ui.Offset.zero['&'](this.size) : null;
    }
    toStringShort() {
      let header = super.toStringShort();
      if (dart.test(this[_isOverflowing])) header = dart.notNull(header) + " OVERFLOWING";
      return header;
    }
  };
  (shifted_box.RenderConstraintsTransformBox.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[0], 686, 32, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let constraintsTransform = opts && 'constraintsTransform' in opts ? opts.constraintsTransform : null;
    if (constraintsTransform == null) dart.nullFailed(I[0], 688, 38, "constraintsTransform");
    let child = opts && 'child' in opts ? opts.child : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[3] || CT.C3;
    if (clipBehavior == null) dart.nullFailed(I[0], 690, 10, "clipBehavior");
    this[_overflowContainerRect] = ui.Rect.zero;
    this[_overflowChildRect] = ui.Rect.zero;
    this[_isOverflowing] = false;
    this[_childConstraints] = null;
    this[_clipRectLayer] = null;
    if (!(alignment != null)) dart.assertFailed(null, I[0], 691, 15, "alignment != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[0], 692, 15, "clipBehavior != null");
    if (!(constraintsTransform != null)) dart.assertFailed(null, I[0], 693, 15, "constraintsTransform != null");
    this[_constraintsTransform] = constraintsTransform;
    this[_clipBehavior] = clipBehavior;
    shifted_box.RenderConstraintsTransformBox.__proto__.mixin.call(this, alignment, textDirection, child);
    ;
  }).prototype = shifted_box.RenderConstraintsTransformBox.prototype;
  dart.addTypeTests(shifted_box.RenderConstraintsTransformBox);
  dart.addTypeCaches(shifted_box.RenderConstraintsTransformBox);
  dart.setGetterSignature(shifted_box.RenderConstraintsTransformBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderConstraintsTransformBox.__proto__),
    constraintsTransform: dart.fnType(box.BoxConstraints, [box.BoxConstraints]),
    clipBehavior: ui.Clip
  }));
  dart.setSetterSignature(shifted_box.RenderConstraintsTransformBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderConstraintsTransformBox.__proto__),
    constraintsTransform: dart.fnType(box.BoxConstraints, [box.BoxConstraints]),
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(shifted_box.RenderConstraintsTransformBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderConstraintsTransformBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderConstraintsTransformBox.__proto__),
    [_constraintsTransform]: dart.fieldType(dart.fnType(box.BoxConstraints, [box.BoxConstraints])),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_overflowContainerRect]: dart.fieldType(ui.Rect),
    [_overflowChildRect]: dart.fieldType(ui.Rect),
    [_isOverflowing]: dart.fieldType(core.bool),
    [_childConstraints]: dart.fieldType(dart.nullable(box.BoxConstraints)),
    [_clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  var _constrainedAxis = dart.privateName(shifted_box, "_constrainedAxis");
  var BoxConstraints_maxHeight = dart.privateName(box, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box, "BoxConstraints.minWidth");
  var _name$ = dart.privateName(basic_types, "_name");
  shifted_box.RenderUnconstrainedBox = class RenderUnconstrainedBox extends shifted_box.RenderConstraintsTransformBox {
    get constrainedAxis() {
      return this[_constrainedAxis];
    }
    set constrainedAxis(value) {
      if (this[_constrainedAxis] == value) return;
      this[_constrainedAxis] = value;
      this.constraintsTransform = shifted_box.RenderUnconstrainedBox._convertAxis(this.constrainedAxis);
    }
    static _unconstrained(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 913, 55, "constraints");
      return C[4] || CT.C4;
    }
    static _widthConstrained(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 914, 58, "constraints");
      return constraints.widthConstraints();
    }
    static _heightConstrained(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 915, 59, "constraints");
      return constraints.heightConstraints();
    }
    static _convertAxis(constrainedAxis) {
      if (constrainedAxis == null) {
        return C[5] || CT.C5;
      }
      switch (constrainedAxis) {
        case C[7] || CT.C7:
        {
          return C[6] || CT.C6;
        }
        case C[9] || CT.C9:
        {
          return C[8] || CT.C8;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (shifted_box.RenderUnconstrainedBox.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[0], 882, 32, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let constrainedAxis = opts && 'constrainedAxis' in opts ? opts.constrainedAxis : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[3] || CT.C3;
    if (clipBehavior == null) dart.nullFailed(I[0], 886, 10, "clipBehavior");
    if (!(alignment != null)) dart.assertFailed(null, I[0], 887, 15, "alignment != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[0], 888, 15, "clipBehavior != null");
    this[_constrainedAxis] = constrainedAxis;
    shifted_box.RenderUnconstrainedBox.__proto__.new.call(this, {alignment: alignment, textDirection: textDirection, child: child, clipBehavior: clipBehavior, constraintsTransform: shifted_box.RenderUnconstrainedBox._convertAxis(constrainedAxis)});
    ;
  }).prototype = shifted_box.RenderUnconstrainedBox.prototype;
  dart.addTypeTests(shifted_box.RenderUnconstrainedBox);
  dart.addTypeCaches(shifted_box.RenderUnconstrainedBox);
  dart.setGetterSignature(shifted_box.RenderUnconstrainedBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderUnconstrainedBox.__proto__),
    constrainedAxis: dart.nullable(basic_types.Axis)
  }));
  dart.setSetterSignature(shifted_box.RenderUnconstrainedBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderUnconstrainedBox.__proto__),
    constrainedAxis: dart.nullable(basic_types.Axis)
  }));
  dart.setLibraryUri(shifted_box.RenderUnconstrainedBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderUnconstrainedBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderUnconstrainedBox.__proto__),
    [_constrainedAxis]: dart.fieldType(dart.nullable(basic_types.Axis))
  }));
  var _requestedSize = dart.privateName(shifted_box, "_requestedSize");
  shifted_box.RenderSizedOverflowBox = class RenderSizedOverflowBox extends shifted_box.RenderAligningShiftedBox {
    get requestedSize() {
      return this[_requestedSize];
    }
    set requestedSize(value) {
      if (value == null) dart.nullFailed(I[0], 962, 26, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 963, 12, "value != null");
      if (dart.equals(this[_requestedSize], value)) return;
      this[_requestedSize] = value;
      this.markNeedsLayout();
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 971, 42, "height");
      return this[_requestedSize].width;
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 976, 42, "height");
      return this[_requestedSize].width;
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 981, 43, "width");
      return this[_requestedSize].height;
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 986, 43, "width");
      return this[_requestedSize].height;
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[0], 991, 56, "baseline");
      if (this.child != null) return dart.nullCheck(this.child).getDistanceToActualBaseline(baseline);
      return super.computeDistanceToActualBaseline(baseline);
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 998, 40, "constraints");
      return constraints.constrain(this[_requestedSize]);
    }
    performLayout() {
      this.size = this.constraints.constrain(this[_requestedSize]);
      if (this.child != null) {
        dart.nullCheck(this.child).layout(this.constraints, {parentUsesSize: true});
        this.alignChild();
      }
    }
  };
  (shifted_box.RenderSizedOverflowBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let requestedSize = opts && 'requestedSize' in opts ? opts.requestedSize : null;
    if (requestedSize == null) dart.nullFailed(I[0], 952, 19, "requestedSize");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 953, 23, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (!(requestedSize != null)) dart.assertFailed(null, I[0], 955, 15, "requestedSize != null");
    this[_requestedSize] = requestedSize;
    shifted_box.RenderSizedOverflowBox.__proto__.new.call(this, {child: child, alignment: alignment, textDirection: textDirection});
    ;
  }).prototype = shifted_box.RenderSizedOverflowBox.prototype;
  dart.addTypeTests(shifted_box.RenderSizedOverflowBox);
  dart.addTypeCaches(shifted_box.RenderSizedOverflowBox);
  dart.setGetterSignature(shifted_box.RenderSizedOverflowBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderSizedOverflowBox.__proto__),
    requestedSize: ui.Size
  }));
  dart.setSetterSignature(shifted_box.RenderSizedOverflowBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderSizedOverflowBox.__proto__),
    requestedSize: ui.Size
  }));
  dart.setLibraryUri(shifted_box.RenderSizedOverflowBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderSizedOverflowBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderSizedOverflowBox.__proto__),
    [_requestedSize]: dart.fieldType(ui.Size)
  }));
  shifted_box.RenderFractionallySizedOverflowBox = class RenderFractionallySizedOverflowBox extends shifted_box.RenderAligningShiftedBox {
    get widthFactor() {
      return this[_widthFactor];
    }
    set widthFactor(value) {
      if (!(value == null || dart.notNull(value) >= 0.0)) dart.assertFailed(null, I[0], 1054, 12, "value == null || value >= 0.0");
      if (this[_widthFactor] == value) return;
      this[_widthFactor] = value;
      this.markNeedsLayout();
    }
    get heightFactor() {
      return this[_heightFactor];
    }
    set heightFactor(value) {
      if (!(value == null || dart.notNull(value) >= 0.0)) dart.assertFailed(null, I[0], 1069, 12, "value == null || value >= 0.0");
      if (this[_heightFactor] == value) return;
      this[_heightFactor] = value;
      this.markNeedsLayout();
    }
    [_getInnerConstraints](constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1076, 54, "constraints");
      let minWidth = constraints.minWidth;
      let maxWidth = constraints.maxWidth;
      if (this[_widthFactor] != null) {
        let width = dart.notNull(maxWidth) * dart.nullCheck(this[_widthFactor]);
        minWidth = width;
        maxWidth = width;
      }
      let minHeight = constraints.minHeight;
      let maxHeight = constraints.maxHeight;
      if (this[_heightFactor] != null) {
        let height = dart.notNull(maxHeight) * dart.nullCheck(this[_heightFactor]);
        minHeight = height;
        maxHeight = height;
      }
      return new box.BoxConstraints.new({minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight});
    }
    computeMinIntrinsicWidth(height) {
      let t0, t0$;
      if (height == null) dart.nullFailed(I[0], 1100, 42, "height");
      let result = null;
      if (this.child == null) {
        result = super.computeMinIntrinsicWidth(height);
      } else {
        result = dart.nullCheck(this.child).getMinIntrinsicWidth(dart.notNull(height) * dart.notNull((t0 = this[_heightFactor], t0 == null ? 1.0 : t0)));
      }
      if (!result[$isFinite]) dart.assertFailed(null, I[0], 1107, 12, "result.isFinite");
      return dart.notNull(result) / dart.notNull((t0$ = this[_widthFactor], t0$ == null ? 1.0 : t0$));
    }
    computeMaxIntrinsicWidth(height) {
      let t0, t0$;
      if (height == null) dart.nullFailed(I[0], 1112, 42, "height");
      let result = null;
      if (this.child == null) {
        result = super.computeMaxIntrinsicWidth(height);
      } else {
        result = dart.nullCheck(this.child).getMaxIntrinsicWidth(dart.notNull(height) * dart.notNull((t0 = this[_heightFactor], t0 == null ? 1.0 : t0)));
      }
      if (!result[$isFinite]) dart.assertFailed(null, I[0], 1119, 12, "result.isFinite");
      return dart.notNull(result) / dart.notNull((t0$ = this[_widthFactor], t0$ == null ? 1.0 : t0$));
    }
    computeMinIntrinsicHeight(width) {
      let t0, t0$;
      if (width == null) dart.nullFailed(I[0], 1124, 43, "width");
      let result = null;
      if (this.child == null) {
        result = super.computeMinIntrinsicHeight(width);
      } else {
        result = dart.nullCheck(this.child).getMinIntrinsicHeight(dart.notNull(width) * dart.notNull((t0 = this[_widthFactor], t0 == null ? 1.0 : t0)));
      }
      if (!result[$isFinite]) dart.assertFailed(null, I[0], 1131, 12, "result.isFinite");
      return dart.notNull(result) / dart.notNull((t0$ = this[_heightFactor], t0$ == null ? 1.0 : t0$));
    }
    computeMaxIntrinsicHeight(width) {
      let t0, t0$;
      if (width == null) dart.nullFailed(I[0], 1136, 43, "width");
      let result = null;
      if (this.child == null) {
        result = super.computeMaxIntrinsicHeight(width);
      } else {
        result = dart.nullCheck(this.child).getMaxIntrinsicHeight(dart.notNull(width) * dart.notNull((t0 = this[_widthFactor], t0 == null ? 1.0 : t0)));
      }
      if (!result[$isFinite]) dart.assertFailed(null, I[0], 1143, 12, "result.isFinite");
      return dart.notNull(result) / dart.notNull((t0$ = this[_heightFactor], t0$ == null ? 1.0 : t0$));
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1148, 40, "constraints");
      if (this.child != null) {
        let childSize = dart.nullCheck(this.child).getDryLayout(this[_getInnerConstraints](constraints));
        return constraints.constrain(childSize);
      }
      return constraints.constrain(this[_getInnerConstraints](constraints).constrain(ui.Size.zero));
    }
    performLayout() {
      if (this.child != null) {
        dart.nullCheck(this.child).layout(this[_getInnerConstraints](this.constraints), {parentUsesSize: true});
        this.size = this.constraints.constrain(dart.nullCheck(this.child).size);
        this.alignChild();
      } else {
        this.size = this.constraints.constrain(this[_getInnerConstraints](this.constraints).constrain(ui.Size.zero));
      }
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 1168, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("widthFactor", this[_widthFactor], {ifNull: "pass-through"}));
      properties.add(new diagnostics.DoubleProperty.new("heightFactor", this[_heightFactor], {ifNull: "pass-through"}));
    }
  };
  (shifted_box.RenderFractionallySizedOverflowBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 1037, 23, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_widthFactor] = widthFactor;
    this[_heightFactor] = heightFactor;
    shifted_box.RenderFractionallySizedOverflowBox.__proto__.new.call(this, {child: child, alignment: alignment, textDirection: textDirection});
    if (!(this[_widthFactor] == null || dart.nullCheck(this[_widthFactor]) >= 0.0)) dart.assertFailed(null, I[0], 1042, 12, "_widthFactor == null || _widthFactor! >= 0.0");
    if (!(this[_heightFactor] == null || dart.nullCheck(this[_heightFactor]) >= 0.0)) dart.assertFailed(null, I[0], 1043, 12, "_heightFactor == null || _heightFactor! >= 0.0");
  }).prototype = shifted_box.RenderFractionallySizedOverflowBox.prototype;
  dart.addTypeTests(shifted_box.RenderFractionallySizedOverflowBox);
  dart.addTypeCaches(shifted_box.RenderFractionallySizedOverflowBox);
  dart.setMethodSignature(shifted_box.RenderFractionallySizedOverflowBox, () => ({
    __proto__: dart.getMethods(shifted_box.RenderFractionallySizedOverflowBox.__proto__),
    [_getInnerConstraints]: dart.fnType(box.BoxConstraints, [box.BoxConstraints])
  }));
  dart.setGetterSignature(shifted_box.RenderFractionallySizedOverflowBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderFractionallySizedOverflowBox.__proto__),
    widthFactor: dart.nullable(core.double),
    heightFactor: dart.nullable(core.double)
  }));
  dart.setSetterSignature(shifted_box.RenderFractionallySizedOverflowBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderFractionallySizedOverflowBox.__proto__),
    widthFactor: dart.nullable(core.double),
    heightFactor: dart.nullable(core.double)
  }));
  dart.setLibraryUri(shifted_box.RenderFractionallySizedOverflowBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderFractionallySizedOverflowBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderFractionallySizedOverflowBox.__proto__),
    [_widthFactor]: dart.fieldType(dart.nullable(core.double)),
    [_heightFactor]: dart.fieldType(dart.nullable(core.double))
  }));
  var _relayout = dart.privateName(shifted_box, "SingleChildLayoutDelegate._relayout");
  var _relayout$ = dart.privateName(shifted_box, "_relayout");
  shifted_box.SingleChildLayoutDelegate = class SingleChildLayoutDelegate extends core.Object {
    get [_relayout$]() {
      return this[_relayout];
    }
    set [_relayout$](value) {
      super[_relayout$] = value;
    }
    getSize(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1212, 31, "constraints");
      return constraints.biggest;
    }
    getConstraintsForChild(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1221, 56, "constraints");
      return constraints;
    }
    getPositionForChild(size, childSize) {
      if (size == null) dart.nullFailed(I[0], 1232, 35, "size");
      if (childSize == null) dart.nullFailed(I[0], 1232, 46, "childSize");
      return ui.Offset.zero;
    }
  };
  (shifted_box.SingleChildLayoutDelegate.new = function(opts) {
    let relayout = opts && 'relayout' in opts ? opts.relayout : null;
    this[_relayout] = relayout;
    ;
  }).prototype = shifted_box.SingleChildLayoutDelegate.prototype;
  dart.addTypeTests(shifted_box.SingleChildLayoutDelegate);
  dart.addTypeCaches(shifted_box.SingleChildLayoutDelegate);
  dart.setMethodSignature(shifted_box.SingleChildLayoutDelegate, () => ({
    __proto__: dart.getMethods(shifted_box.SingleChildLayoutDelegate.__proto__),
    getSize: dart.fnType(ui.Size, [box.BoxConstraints]),
    getConstraintsForChild: dart.fnType(box.BoxConstraints, [box.BoxConstraints]),
    getPositionForChild: dart.fnType(ui.Offset, [ui.Size, ui.Size])
  }));
  dart.setLibraryUri(shifted_box.SingleChildLayoutDelegate, I[1]);
  dart.setFieldSignature(shifted_box.SingleChildLayoutDelegate, () => ({
    __proto__: dart.getFields(shifted_box.SingleChildLayoutDelegate.__proto__),
    [_relayout$]: dart.finalFieldType(dart.nullable(change_notifier.Listenable))
  }));
  var _delegate = dart.privateName(shifted_box, "_delegate");
  var _getSize = dart.privateName(shifted_box, "_getSize");
  shifted_box.RenderCustomSingleChildLayoutBox = class RenderCustomSingleChildLayoutBox extends shifted_box.RenderShiftedBox {
    get delegate() {
      return this[_delegate];
    }
    set delegate(newDelegate) {
      let t0, t0$;
      if (newDelegate == null) dart.nullFailed(I[0], 1276, 42, "newDelegate");
      if (!(newDelegate != null)) dart.assertFailed(null, I[0], 1277, 12, "newDelegate != null");
      if (dart.equals(this[_delegate], newDelegate)) return;
      let oldDelegate = this[_delegate];
      if (!dart.equals(dart.runtimeType(newDelegate), dart.runtimeType(oldDelegate)) || dart.test(newDelegate.shouldRelayout(oldDelegate))) this.markNeedsLayout();
      this[_delegate] = newDelegate;
      if (dart.test(this.attached)) {
        t0 = oldDelegate[_relayout$];
        t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsLayout'));
        t0$ = newDelegate[_relayout$];
        t0$ == null ? null : t0$.addListener(dart.bind(this, 'markNeedsLayout'));
      }
    }
    attach(owner) {
      let t0;
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 1291, 29, "owner");
      super.attach(owner);
      t0 = this[_delegate][_relayout$];
      t0 == null ? null : t0.addListener(dart.bind(this, 'markNeedsLayout'));
    }
    detach() {
      let t0;
      t0 = this[_delegate][_relayout$];
      t0 == null ? null : t0.removeListener(dart.bind(this, 'markNeedsLayout'));
      super.detach();
    }
    [_getSize](constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1302, 32, "constraints");
      return constraints.constrain(this[_delegate].getSize(constraints));
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 1311, 42, "height");
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 1319, 42, "height");
      let width = this[_getSize](new box.BoxConstraints.tightForFinite({height: height})).width;
      if (width[$isFinite]) return width;
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 1327, 43, "width");
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 1335, 43, "width");
      let height = this[_getSize](new box.BoxConstraints.tightForFinite({width: width})).height;
      if (height[$isFinite]) return height;
      return 0.0;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1343, 40, "constraints");
      return this[_getSize](constraints);
    }
    performLayout() {
      this.size = this[_getSize](this.constraints);
      if (this.child != null) {
        let childConstraints = this.delegate.getConstraintsForChild(this.constraints);
        if (!dart.test(childConstraints.debugAssertIsValid({isAppliedConstraint: true}))) dart.assertFailed(null, I[0], 1352, 14, "childConstraints.debugAssertIsValid(isAppliedConstraint: true)");
        dart.nullCheck(this.child).layout(childConstraints, {parentUsesSize: !dart.test(childConstraints.isTight)});
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        childParentData.offset = this.delegate.getPositionForChild(this.size, dart.test(childConstraints.isTight) ? childConstraints.smallest : dart.nullCheck(this.child).size);
      }
    }
  };
  (shifted_box.RenderCustomSingleChildLayoutBox.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    if (delegate == null) dart.nullFailed(I[0], 1268, 40, "delegate");
    if (!(delegate != null)) dart.assertFailed(null, I[0], 1269, 15, "delegate != null");
    this[_delegate] = delegate;
    shifted_box.RenderCustomSingleChildLayoutBox.__proto__.new.call(this, child);
    ;
  }).prototype = shifted_box.RenderCustomSingleChildLayoutBox.prototype;
  dart.addTypeTests(shifted_box.RenderCustomSingleChildLayoutBox);
  dart.addTypeCaches(shifted_box.RenderCustomSingleChildLayoutBox);
  dart.setMethodSignature(shifted_box.RenderCustomSingleChildLayoutBox, () => ({
    __proto__: dart.getMethods(shifted_box.RenderCustomSingleChildLayoutBox.__proto__),
    [_getSize]: dart.fnType(ui.Size, [box.BoxConstraints])
  }));
  dart.setGetterSignature(shifted_box.RenderCustomSingleChildLayoutBox, () => ({
    __proto__: dart.getGetters(shifted_box.RenderCustomSingleChildLayoutBox.__proto__),
    delegate: shifted_box.SingleChildLayoutDelegate
  }));
  dart.setSetterSignature(shifted_box.RenderCustomSingleChildLayoutBox, () => ({
    __proto__: dart.getSetters(shifted_box.RenderCustomSingleChildLayoutBox.__proto__),
    delegate: shifted_box.SingleChildLayoutDelegate
  }));
  dart.setLibraryUri(shifted_box.RenderCustomSingleChildLayoutBox, I[1]);
  dart.setFieldSignature(shifted_box.RenderCustomSingleChildLayoutBox, () => ({
    __proto__: dart.getFields(shifted_box.RenderCustomSingleChildLayoutBox.__proto__),
    [_delegate]: dart.fieldType(shifted_box.SingleChildLayoutDelegate)
  }));
  var _baseline = dart.privateName(shifted_box, "_baseline");
  var _baselineType = dart.privateName(shifted_box, "_baselineType");
  shifted_box.RenderBaseline = class RenderBaseline extends shifted_box.RenderShiftedBox {
    get baseline() {
      return this[_baseline];
    }
    set baseline(value) {
      if (value == null) dart.nullFailed(I[0], 1394, 23, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1395, 12, "value != null");
      if (this[_baseline] == value) return;
      this[_baseline] = value;
      this.markNeedsLayout();
    }
    get baselineType() {
      return this[_baselineType];
    }
    set baselineType(value) {
      if (value == null) dart.nullFailed(I[0], 1405, 33, "value");
      if (!(value != null)) dart.assertFailed(null, I[0], 1406, 12, "value != null");
      if (this[_baselineType] == value) return;
      this[_baselineType] = value;
      this.markNeedsLayout();
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1414, 40, "constraints");
      if (this.child != null) {
        if (!dart.test(this.debugCannotComputeDryLayout({reason: "Baseline metrics are only available after a full layout."}))) dart.assertFailed(null, I[0], 1416, 14, "debugCannotComputeDryLayout(\r\n        reason: 'Baseline metrics are only available after a full layout.',\r\n      )");
        return ui.Size.zero;
      }
      return constraints.smallest;
    }
    performLayout() {
      if (this.child != null) {
        let constraints = this.constraints;
        dart.nullCheck(this.child).layout(constraints.loosen(), {parentUsesSize: true});
        let childBaseline = dart.nullCheck(dart.nullCheck(this.child).getDistanceToBaseline(this.baselineType));
        let actualBaseline = this.baseline;
        let top = dart.notNull(actualBaseline) - childBaseline;
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        childParentData.offset = new ui.Offset.new(0.0, top);
        let childSize = dart.nullCheck(this.child).size;
        this.size = constraints.constrain(new ui.Size.new(childSize.width, top + dart.notNull(childSize.height)));
      } else {
        this.size = this.constraints.smallest;
      }
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 1442, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.DoubleProperty.new("baseline", this.baseline));
      properties.add(new (T.EnumPropertyOfTextBaseline()).new("baselineType", this.baselineType));
    }
  };
  (shifted_box.RenderBaseline.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    if (baseline == null) dart.nullFailed(I[0], 1382, 21, "baseline");
    let baselineType = opts && 'baselineType' in opts ? opts.baselineType : null;
    if (baselineType == null) dart.nullFailed(I[0], 1383, 27, "baselineType");
    if (!(baseline != null)) dart.assertFailed(null, I[0], 1384, 15, "baseline != null");
    if (!(baselineType != null)) dart.assertFailed(null, I[0], 1385, 15, "baselineType != null");
    this[_baseline] = baseline;
    this[_baselineType] = baselineType;
    shifted_box.RenderBaseline.__proto__.new.call(this, child);
    ;
  }).prototype = shifted_box.RenderBaseline.prototype;
  dart.addTypeTests(shifted_box.RenderBaseline);
  dart.addTypeCaches(shifted_box.RenderBaseline);
  dart.setGetterSignature(shifted_box.RenderBaseline, () => ({
    __proto__: dart.getGetters(shifted_box.RenderBaseline.__proto__),
    baseline: core.double,
    baselineType: ui.TextBaseline
  }));
  dart.setSetterSignature(shifted_box.RenderBaseline, () => ({
    __proto__: dart.getSetters(shifted_box.RenderBaseline.__proto__),
    baseline: core.double,
    baselineType: ui.TextBaseline
  }));
  dart.setLibraryUri(shifted_box.RenderBaseline, I[1]);
  dart.setFieldSignature(shifted_box.RenderBaseline, () => ({
    __proto__: dart.getFields(shifted_box.RenderBaseline.__proto__),
    [_baseline]: dart.fieldType(core.double),
    [_baselineType]: dart.fieldType(ui.TextBaseline)
  }));
  dart.trackLibraries("packages/flutter/src/rendering/shifted_box.dart", {
    "package:flutter/src/rendering/shifted_box.dart": shifted_box
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["shifted_box.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/flutter/src/rendering/shifted_box.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__shifted_box: shifted_box
  };
}));

//# sourceMappingURL=shifted_box.dart.lib.js.map
